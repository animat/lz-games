import mx.utils.Delegate;import flash.external.ExternalInterface;import toolbarcomponent.core.ForeignCharacters;//class RunGame extends LZGame implements gametypes.TranslationGame {	// Relevant movie clips	private var holder:MovieClip;	// Relevant input fields	private var inputText:utilities.LZInputText;	private var qDisplay:StimulusDisplay;	private var timer:Timer;	//	private var correctFX:MovieClip;	private var incorrectFX:MovieClip;	//	public function RunGame(main:MovieClip) {		super(main);		//		holder = main.createEmptyMovieClip("holder", main.getNextHighestDepth());		holder._x = 300;		holder._y = 200;		var displayCharacters:ForeignCharacters = new ForeignCharacters(language, main, 200, Stage.height+30, 200, null);		createLandscape();		timer = new Timer(this, 80, 350, 85);		//		correctFX = LZGame.getStage().attachMovie("_spring.mp3", "_spring.mp3", LZGame.getStage().getNextHighestDepth());		incorrectFX = LZGame.getStage().attachMovie("_drip.mp3", "_drip.mp3", LZGame.getStage().getNextHighestDepth());		//		main.onEnterFrame = Delegate.create(this, checkInput);		//		Animator.registerTWN(holder); // <--- Not working		nextQuestion(false);	}	//	// Attach clips to the stage, create the first landscape	private function createLandscape():Void {		holder.attachMovie("static", "static", 1);		var inputs:MovieClip = holder.attachMovie("input_fields", "input_fields", 50);		//lang_txt = holder.input_fields.lang_txt;		if (inputText != undefined) {			inputText.destroy();		}		inputText = new utilities.LZInputText(holder.input_fields, "inputText", 214, 19);		inputText.setPos(221, 11);		inputText.hideBorder();		holder.input_fields.tryBtn.onRelease = Delegate.create(this, evaluate);		// Offset for the holder mc's _x and _y		inputs._x = -250;		inputs._y = -180;	}	public function checkInput ():Void {		if (Key.isDown (Key.ENTER)) {			evaluate ();		}	}	//	// Proceed to next question, set all necessary vars	public function nextQuestion(proceed:Boolean):Void {		if (proceed == "true" || proceed == true) {			questionList.increaseQNum();		}		if (holder.congrats == undefined) {			holder.attachMovie("static", "static", 1);		}		refreshQDisplay(true);	}	//	// Refresh the displays of the question/ answer info without any animating	public function refreshQDisplay(resetTxtField:Boolean):Void {		correctFX.gotoAndStop(1);		incorrectFX.gotoAndStop(1);		LZGame.setBusy(false);		if (questionList.getCurrentQ() != undefined) {			if (resetTxtField && !inputText.isAnimating()) {				inputText.clearText();				inputText.enable();				trace("text field enabled");			} 			if (qDisplay.getStimulus() != questionList.getCurrentQ().getStimulus()) {				if (qDisplay != null) {					qDisplay.reset();				}				qDisplay = new MQuestionDisplay(main, "qDisplay", questionList.getCurrentQ().getStimulus());				qDisplay.setDim(50, 50);				qDisplay.setPos(220, 27);			}		}	}	//	// Evaluate the user's attempt with the active text fields	public function evaluate():Void {		if (!LZGame.isBusy()) {			LZGame.setBusy(true);			inputText.displayFeedback(questionList.getCurrentQ().getResponses()[0].getStimulus().getContent());			if (questionList.getCurrentQ().evaluate(new TypedInput(inputText.getInput()))) {				correctAnswer();			} else {				incorrectAnswer();			}		}	}	//	// Control reactions for correct and incorrect answers	public function correctAnswer():Void {		correctFX.gotoAndPlay(2);		if (questionList.getQuestionsLeft() == 2) {			holder.attachMovie("congrats", "congrats", 1);			TimelineManager.registerClip(holder.congrats, this, nextQuestion, [true], "lastQuestion");		} else if (questionList.getQuestionsLeft() == 1) {			trace("only 1 question left!!!");			qDisplay.reset();			holder.congrats.play();			holder.input_fields._visible = false;			TimelineManager.registerClip(holder.congrats, this, winGame, [], "finished");		} else {			holder.attachMovie("correct", "correct", 1);			TimelineManager.registerClip(holder.correct, this, nextQuestion, [true], "done");		}	}	public function incorrectAnswer():Void {		if (questionList.getQuestionsLeft() == 1) {			holder.congrats.gotoAndPlay("incorrect");			TimelineManager.registerClip(holder.congrats, this, nextQuestion, [false], "lastQuestion");		} else {			incorrectFX.gotoAndPlay(2);			holder.attachMovie("incorrect", "incorrect", 1);			TimelineManager.registerClip(holder.incorrect, this, refreshQDisplay, [true]);		}	}	public function winGame():Void {		timer.stopTimer();		timer.setScalePos(155);		timer.setXPos(130);		timer.setYPos(285);		inputText.destroy();		holder.createEmptyMovieClip("winGame", holder.getNextHighestDepth());		holder.winGame.attachMovie("win", "win", 1);	}	public function getScore():String {		return String(timer.getTime());	}		public function runMoveToEnd ():Void {		movetoend ();		refreshQDisplay (true);	}	public function runGiveUp ():Void {		timer.addSeconds(10);		giveup (this,correctAnswer);	}	public function runNextLetter ():Void {		timer.addSeconds(3);		nextLetter (inputText.getTextField());	}	public function pauseGame ():Void {		Animator.pauseAni ();		inputText.disable();		timer.pauseTimer ();	}	public function resumeGame ():Void {		Animator.resumeAni ();		inputText.enable();		timer.resumeTimer ();	}}