import mx.utils.Delegate;import mx.transitions.Tween;class Ball {	var clip:MovieClip;	private var showingQuestion:MovieClip;	private var main:MovieClip;	private var showingTooltip:Boolean;	private var delay:Number;	private var pressingSpace:Boolean;	var yspeed:Number;	var xspeed:Number;	var power:Number;	var upconstant:Number;	var friction:Number;		public function Ball() {		yspeed = 0;		xspeed = 0;		power = 0.30;		upconstant = 0.75;		friction = 0.99;				showingTooltip = false;		pressingSpace = false;				main = LZGame.getStage();		clip = main.attachMovie("ball", "ball", main.getNextHighestDepth(), {_x: 300, _y: 250});		showingQuestion = main.attachMovie("showingQuestion", "showingQuestions", main.getNextHighestDepth());		clip.onRollOver = Delegate.create(this, showQuestion);		clip.onEnterFrame = Delegate.create(this, roll);	}	private function roll():Void {				checkKeys();		clip._y += yspeed;		clip._x += xspeed;		clip._rotation = clip._rotation+xspeed;		showingQuestion._x = clip._x;		showingQuestion._y = clip._y - 20;		checkBoundaries();	}		private function checkKeys():Void {		if (Key.isDown(Key.LEFT)) {			xspeed = xspeed-power;		}		if (Key.isDown(Key.RIGHT)) {			xspeed = xspeed+power;		}		if (Key.isDown(Key.UP)) {			yspeed = yspeed-power*upconstant;		}		if (Key.isDown(Key.DOWN)) {			yspeed = yspeed+power*upconstant;		}		if (Key.isDown(Key.SPACE)) {			pressingSpace = true;		} else {			if (pressingSpace) {				LZGame.getInstance().evaluate(null);				pressingSpace = false;			}		}	}	private function checkBoundaries():Void {		if (clip._y > 380) {			yspeed *= -.5;			clip._y = 375;		}		if (clip._y < 20) {			yspeed *= -.5;			clip._y = 25;		}		if (clip._x < 20) {			xspeed *= -.5;			clip._x = 25;		}		if (clip._x > 580) {			xspeed *= -.5;			clip._x = 575;		}	}		public function screwball():Void {		yspeed = 15 + Math.floor(Math.random() * 20);		xspeed = 15 + Math.floor(Math.random() * 20);	}		public function showQuestion():Void {		if (!showingTooltip) {			showingTooltip = true;			var twn:Tween = new Tween(showingQuestion, "_alpha", mx.transitions.easing.Regular.easeOut, 0, 100, 1, true);			twn.onMotionFinished = Delegate.create(this, showQuestionDelay);		}	}	private function showQuestionDelay():Void {		delay = setInterval(this, "hideQuestion", 4000);	}	private function hideQuestion():Void {		clearInterval(delay);		var twn:Tween = new Tween(showingQuestion, "_alpha", mx.transitions.easing.Regular.easeOut, 100, 0, 1, true);		twn.onMotionFinished = Delegate.create(this, hideQuestionComplete);	}	private function hideQuestionComplete():Void {		showingTooltip = false;	}		public function getClip():MovieClip {		return clip;	}}