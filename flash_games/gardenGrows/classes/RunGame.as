import mx.utils.Delegate;import flash.filters.DropShadowFilter;import toolbarcomponent.core.ForeignCharacters;//class RunGame extends LZGame implements gametypes.RecognitionGame {	//	public var plantManager:PlantManager;	private var totalPlants:Number;	private var blossomedPlants:Number;	public var checkAnswer:CheckAnswer;	private var plantInFocus:Plant;	private var plantFiltersArray:Array;	private var bellFX:MovieClip;	private var blossomFX:MovieClip;	//	public function RunGame(main:MovieClip) {		super(main);		LZGame.setInstance(this);		//		plantManager = new PlantManager(this, questionList);		checkAnswer = new CheckAnswer(this);		totalPlants = questionList.getQTotal();		blossomedPlants = 0;		plantFiltersArray = new Array(new DropShadowFilter(4, 30, 0x333333, 80, 6, 6, 2, 2, false, false, false));		plantInFocus = null;		checkAnswer.setClipFilters(plantFiltersArray);		blossomFX = main.attachMovie("_blossom.mp3", "blossomFX", main.getNextHighestDepth());		bellFX = main.attachMovie("_bell.mp3", "bellFX", main.getNextHighestDepth());		//		var displayCharacters:ForeignCharacters = new ForeignCharacters(language, main, 475, 10, 75, "foreignCharBtn");	}	public function attemptAnswer(attempt:Object):Void {		var tmp:Plant = Plant(attempt);		plantInFocus = tmp;		plantInFocus.setClipFilters(plantFiltersArray);		setBusy(true);		checkAnswer.showPanel();	}	public function continuePlaying():Void {		plantInFocus.setClipFilters(new Array());		plantInFocus = null;		setBusy(false);		checkAnswer.hidePanel();				if (blossomedPlants == totalPlants) {				winGame();		} else {			plantManager.grow();		}	}	public function evaluate():Void {		checkAnswer.displayFeedback(plantInFocus.getQuestion().getResponses()[0].getStimulus().getContent());		if (plantInFocus.getQuestion().getResponses()[0].getStimulus().getContent().toLowerCase() == checkAnswer.getInput().toLowerCase()) {			correctAnswer();		} else {			incorrectAnswer();		}	}	public function correctAnswer():Void {		plantManager.blossom(plantInFocus);		blossomFX.gotoAndPlay(2);		continuePlaying();	}	public function incorrectAnswer():Void {		bellFX.gotoAndPlay(2);	}	public function increaseBlossomedPlants():Void {		blossomedPlants++;		if (blossomedPlants == totalPlants) {				winGame();		}	}	public function winGame():Void {		main.gotoAndPlay("win");		main.congratsWindow.swapDepths(5000);	}	public function getScore():String {		return "";	}		public function resetGame():Void {		plantManager.reset();		plantManager = null;		checkAnswer = null;		blossomedPlants = 0;	}	public function pauseGame():Void {		LZGame.setBusy(true);	}	public function resumeGame():Void {		continuePlaying();	}}