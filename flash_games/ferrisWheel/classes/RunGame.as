import mx.utils.Delegate;import toolbarcomponent.core.ForeignCharacters;//class RunGame extends LZGame implements gametypes.MatchingGame {	private var rightFX:MovieClip;	private var wrongFX:MovieClip;	private var movementEngine:MovementEngine;	private var answerDisplay:AnswerDisplay;	private var correctAnswers:TextField;	private var keyListenerSpace:Object;	private var paused:Boolean;	//	private static var letters:Array = [null, "A", "B", "C", "D", "E", 										"F", "G", "H", "I", "J", "K", 										"L", "M", "N", "O", "P", "Q", 										"R", "S", "T", "U", "V", "W", 										"X", "Y", "Z"];	//	public function RunGame(main:MovieClip) {		super(main);		movementEngine = new MovementEngine(this, letters);		//		correctAnswers = main.createTextField("answers", 5000, 0, 0, 200, 600);		correctAnswers.html = true;		correctAnswers.multiline = true;		correctAnswers.htmlText = "";		//		keyListenerSpace = new Object();		Key.addListener(keyListenerSpace);		keyListenerSpace.onKeyDown = Delegate.create(this, selectLetter);		var displayCharacters:ForeignCharacters = new ForeignCharacters(language, main, 200, Stage.height, 200, null, Delegate.create(this, selectLetter));		//		paused = false;		main.lang._visible = false;		nextQuestion(false);		rightFX = LZGame.getStage().attachMovie("rightFX", "rightFX", LZGame.getStage().getNextHighestDepth());		wrongFX = LZGame.getStage().attachMovie("wrongFX", "wrongFX", LZGame.getStage().getNextHighestDepth());			}	public function selectLetter(a:String):Void {		if (a == undefined) {			if (Key.getCode() == 32) {				movementEngine.stopWheel();				checkAttempt();			}		} else {			movementEngine.stopWheel();			evaluate(new Array(a));		}		if (Key.getCode() == Key.LEFT) {			movementEngine.spinLeft();		}		if (Key.getCode() == Key.RIGHT) {			movementEngine.spinRight();		}	}	public function nextQuestion(proceed:Boolean):Void {		if (proceed == true || proceed == "true") {			questionList.increaseQNum();		}		if (questionList.getQuestionsLeft() > 0) {			refreshQDisplay();		} else {			winGame();		}	}	public function refreshQDisplay():Void {		main.english = "Provide the "+language+" for: ";				if (answerDisplay != null) {			delete answerDisplay;		}		answerDisplay = new AnswerDisplay(this, questionList.getCurrentQ());		var newQuestion:Question = questionList.getCurrentQ();		main.english += newQuestion.getStimulus().getContent();	}	public function evaluate(attempts:Object):Void {		var anyCorrect:Boolean = false;				for (var i:Number = 0; i < attempts.length; i++) {			var correctLetter:String = answerDisplay.getCorrectLetterMC().textfield.text;			var inputLetter:String = attempts[i].textfield.text;			if (inputLetter == null || inputLetter == undefined) {				inputLetter = attempts[i].toString();			}			inputLetter = inputLetter.toLowerCase();			correctLetter = correctLetter.toLowerCase();			if (inputLetter == correctLetter) {				anyCorrect = true;			}		}				if (anyCorrect) {			correctAnswer();		} else {			incorrectAnswer();		}	}	public function checkAttempt():Void {		var answers = new Array();		for (var i:Number = 1; i<=26; i++) {			if (main.wheel["seat"+i].hitTest(main.answerPoint)) {				answers.push(main.wheel["seat"+i]);			}		}		evaluate(answers);	}	public function correctAnswer():Void {		answerDisplay.revealLetter();		answerDisplay.decreaseLettersLeft();		rightFX.play();		if (answerDisplay.wordIsFinished()) {			correctAnswers.htmlText += "<font face='Arial' size='16' color='#FFFFFF'>"+answerDisplay.getCorrectWord()+"</font><br />";			nextQuestion(true);		}	}	public function incorrectAnswer():Void {		wrongFX.play();	}	public function winGame():Void {		movementEngine.stopWheel();		main.gotoAndPlay("win");		main.english = "";		correctAnswers.htmlText = "";		removeMovieClip(main.wordHolder);	}	public function getScore():String {		return "";	}	public function pauseGame():Void {		movementEngine.pauseWheel();	}	public function resumeGame():Void {		movementEngine.resumeWheel();	}	public function runMoveToEnd():Void {		movetoend();		refreshQDisplay();	}	public function runNextLetter():Void {		correctAnswer();	}	public function runGiveUp():Void {		while (answerDisplay.getLettersLeft() > 1) {			correctAnswer();			trace("calling the correct answer... "+answerDisplay.getLettersLeft());		}		correctAnswer();		trace("correct answer one last time to move ahead.");	}}