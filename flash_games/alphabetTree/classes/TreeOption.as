import mx.utils.Delegate;import mx.transitions.Tween;class TreeOption {	//	private var classScope:RunGame;	private var clip:MovieClip;	private var question:Question;	private var startX:Number;	private var startY:Number;	private var targetX:Number;	private var targetY:Number;	private var isDragging:Boolean;	private var txtFmt:TextFormat;	private var shadowFmt:TextFormat;	//	public function TreeOption(classScope:RunGame, holder:MovieClip, question:Question) {		this.classScope = classScope;		this.clip = holder;		this.question = question;		isDragging = false;		txtFmt = new TextFormat("Arial", 12, 0xFFFFFF);		shadowFmt = new TextFormat("Arial", 12, 0x333333);		createTextField();		//var stimDisplay:StimulusDisplay = new StimulusDisplay(holder, String(Math.random() * 1000), question.getStimulus());		enableClip();	}	private function createTextField() {		clip.createTextField("tf", 2, 0, 0, 0, 0);		clip.tf.text = question.getStimulus().getContent();		clip.tf.autoSize = true;		clip.tf.setTextFormat(txtFmt);				clip.createTextField("tfshadow", 1, 2, 2, 0, 0);		clip.tfshadow.text = question.getStimulus().getContent();		clip.tfshadow.autoSize = true;		clip.tfshadow.setTextFormat(shadowFmt);	}	private function dragClip():Void {	    startDrag(clip);	}	private function stopDragClip():Void {		stopDrag();		classScope.evaluate(Object(this)); 	}	public function isCorrect():Boolean{		return question.evaluate(new Response("correct", "text"));	}		public function enableClip():Void{		clip.onPress = Delegate.create(this, dragClip);		clip.onRelease = Delegate.create(this, stopDragClip);		clip.onReleaseOutside = Delegate.create(this, stopDragClip);	}	public function disableClip():Void{		clip.onPress = undefined;		clip.onRelease = undefined;		clip.onReleaseOutside = undefined;	}		public function setStartPos(xx:Number, yy:Number):Void{		clip._x = xx;		clip._y = yy;		startX = xx;		startY = yy;		targetX = xx;		targetY = yy;	}	public function resetPos():Void {		if (clip._x != startX || clip._y != startY) {			new Tween(clip, "_x", mx.transitions.easing.Elastic.easeOut, clip._x, startX, 2, true);			new Tween(clip, "_y", mx.transitions.easing.Elastic.easeOut, clip._y, startY, 2, true);			enableClip();		}	}	public function setTargetPos(xx:Number, yy:Number):Void {		targetX = xx;		targetY = yy;		new Tween(clip, "_x", mx.transitions.easing.Regular.easeInOut, clip._x, targetX, 1.1, true);  	    new Tween(clip, "_y", mx.transitions.easing.Regular.easeInOut, clip._y, targetY, 1.1, true);	}	public function getClip():MovieClip {		return clip;	}}