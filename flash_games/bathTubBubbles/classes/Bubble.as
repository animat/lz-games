import mx.utils.Delegate;import flash.geom.Point;import mx.transitions.Tween;//class Bubble {	private var manager:BubbleManager;	private var clip:MovieClip;	private var option:Option;	private var stimDisplay:StimulusDisplay;	private var popped:Boolean;	private var paused:Boolean;	//	private var twnX:Tween;	private var twnY:Tween;	private var finishedFloatingX:Boolean;	private var finishedFloatingY:Boolean;	private var tweenXScale:Tween;	private var tweenYScale:Tween;	private var tweenAlpha:Tween;	//	private var dest:Point;	private var fadePause:Number;	private var scaler:Number;	private static var WIDTH = 600;	private static var HEIGHT = 300;	//	public function Bubble(manager:BubbleManager, holder:MovieClip, index:Number, option:Option) {		this.manager = manager;		clip = holder.attachMovie("bubble", "bubble"+index, holder.getNextHighestDepth());		this.option = option;		stimDisplay = new StimulusDisplay(clip, "stimDisplay", option.getStimulus());		stimDisplay.setTextFormat(new TextFormat("Trebuchet MS", 10, 0x118CB7));		stimDisplay.setPos(-10, -10);		popped = false;		paused = false;				placeClip();		float();		clip.onRelease = Delegate.create(this, selectBubble);	}	private function placeClip():Void {		clip._alpha = 0;		clip._x = Math.ceil(Math.random() * WIDTH);		clip._y = 100 + Math.ceil(Math.random() * HEIGHT);		scaler = 150 + (Math.ceil(Math.random() * 25));		var hesitate:Number = Math.random() * 2000;		fadePause = setInterval(this, "fadeIn", hesitate);	}	private function float():Void {		if (!popped) {			dest = new Point(Math.ceil(Math.random() * WIDTH), 100 + Math.ceil(Math.random() * HEIGHT));			var diff:Number = calculateDistanceToTravel();			var animTime:Number = 4 + Math.ceil(Math.random() * (diff / 100));			twnX = new Tween(clip, "_x", mx.transitions.easing.Regular.easeInOut, clip._x, dest.x, animTime, true);			twnX.onMotionFinished = Delegate.create(this, setFinishedFloatingX);			finishedFloatingX = false;			twnY = new Tween(clip, "_y", mx.transitions.easing.Regular.easeInOut, clip._y, dest.y, animTime, true);			twnY.onMotionFinished = Delegate.create(this, setFinishedFloatingY);			finishedFloatingY = false;		}	}	private function setFinishedFloatingX():Void {		finishedFloatingX = true;		delete twnX.onMotionFinished;		if (finishedFloatingY) {			float();		}	}	private function setFinishedFloatingY():Void {		finishedFloatingY = true;		delete twnY.onMotionFinished;		if (finishedFloatingX) {			float();		}	}	private function calculateDistanceToTravel():Number {		var current:Point = new Point (clip._x, clip._y);		return Math.floor(Point.distance(current, dest));	}	private function fadeIn():Void {		tweenXScale = new Tween(clip, "_xscale", mx.transitions.easing.Elastic.easeOut, 0, scaler, 4, true);		tweenYScale = new Tween(clip, "_yscale", mx.transitions.easing.Elastic.easeOut, 0, scaler, 4, true);		tweenAlpha = new Tween(clip, "_alpha", mx.transitions.easing.Regular.easeOut, 0, 100, 2, true);		clearInterval(fadePause);	}	public function selectBubble():Void {		manager.evaluate(this);		popBubble();	}	public function popBubble():Void {		manager.playPopFX();		popped = true;		twnX = null;		twnY = null;		tweenXScale = null;		tweenYScale = null;		tweenAlpha = null;		finishedFloatingX = false;		finishedFloatingY = false;		stimDisplay.hide();		clip.gotoAndPlay("pop");		clip.enabled = false;	}	public function resetBubble():Void {;		if (popped) {			popped = false;			finishedFloatingX = false;			finishedFloatingY = false;			stimDisplay.show();			clip.gotoAndStop(1);			placeClip();			float();			clip.enabled = true;			activateBubble();		}	}	public function activateBubble():Void {		if (!popped && !clip.enabled) {			clip.enabled = true;		}	}	public function deactivateBubble():Void {		if (!popped && clip.enabled) {			clip.enabled = false;		}	}	public function destroyBubble():Void {		clip.enabled = false;		clip._visible = false;		delete clip.onEnterFrame;	}	//	public function getClip():MovieClip {		return clip;	}	public function getOption():Option {		return option;	}	public function isPopped():Boolean {		return popped;	}		public function pauseBubble():Void {		paused = true;		twnX.stop();		twnY.stop();	}	public function resumeBubble():Void {		paused = false;		twnX.resume();		twnY.resume();	}}