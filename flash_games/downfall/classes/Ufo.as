import mx.utils.Delegate;//class Ufo{	private var clip:MovieClip;	private var manager:UfoManager;	private var option:Option;	private var baseSpeed:Number;	private var speed:Number;	private var active:Boolean;	private var paused:Boolean;	//	public function Ufo(manager:UfoManager, holder:MovieClip, option:Option, i:Number) {		this.manager = manager;		this.option = option;		clip = holder.attachMovie("ufo", "ufo"+"_"+i, 10+i);		clip._visible = false;		active = false;		baseSpeed = 2;		paused = false;		setDisplay();	}	private function setDisplay() {		// *** TODO: Use StimulusDisplay		clip.optionDisplay = option.getStimulus().getContent();	}	public function activateUfo():Void {		active = true;		speed = baseSpeed + (Math.random() * 2);		clip._x = Math.random() * (600 - (clip._width - 10));		clip._y = 0 - clip._height;		clip._visible = true;		clip.gotoAndStop("static");		clip.onEnterFrame = Delegate.create(this, moveUfo);	}	private function moveUfo() {		if (!paused) {			clip._y += speed;			if (clip._y > 400 && active) {				deactivateUfo();			}		}	}	public function deactivateUfo():Void {		active = false;		manager.deactivateUfo(this);		clip._visible = false;		delete clip.onEnterFrame;	}	public function explodeUfo():Void {		clip.gotoAndPlay("explode");	}	public function failedAttempt():Void {		clip.gotoAndPlay("fail");	}	public function dropUfo():Void {		clip.gotoAndPlay("drop");		fallUfo();	}	public function fallUfo():Void {		clip._y += speed;		speed += 5;		if (clip._y > 400 && active) {			deactivateUfo();		}	}	public function pauseUfo():Void {		paused = true;	}	public function resumeUfo():Void {		paused = false;	}	//	public function isActive():Boolean {		return active;	}	public function getClip():MovieClip {		return clip;	}	public function getOption():Option {		return option;	}	public function setBaseSpeed(num:Number):Void {		baseSpeed = num;	}	public function getBaseSpeed():Number {		return baseSpeed;	}	public function resetSpeed(newSpeed:Number):Void {		speed = newSpeed;	}}