import mx.utils.Delegate;import mx.transitions.Tween;//class Ship {	private var classScope:Object;	private var clip:MovieClip;	private var baseSpeed:Number;	private var speed:Number;	private var active:Boolean;	private var targetX:Number;	private var friction:Number;	private var bullet:Bullet;	private var keyListenerSpace:Object;	private var paused:Boolean;	public function Ship(classScope:Object) {		this.classScope = classScope;		var depth = LZGame.getStage().getNextHighestDepth();		clip = LZGame.getStage().attachMovie("ship", "ship", depth);		clip._x = targetX = Stage.width / 2;		clip._y = Stage.height - clip._height;		baseSpeed = 30;		speed = baseSpeed;		active = true;		friction = 8;		paused = false;		initKeys();	}	private function initKeys():Void {		clip.onEnterFrame = Delegate.create(this, shipMovement);		var keyListenerLeft:Object = new Object();		var keyListenerRight:Object = new Object();		keyListenerSpace = new Object();		keyListenerLeft.onKeyDown = Delegate.create(this, moveLeft);		keyListenerRight.onKeyDown = Delegate.create(this, moveRight);		keyListenerSpace.onKeyDown = Delegate.create(this, shootBullet);		Key.addListener(keyListenerLeft);		Key.addListener(keyListenerRight);		Key.addListener(keyListenerSpace);	}	private function shipMovement() {		if (!paused) {			clip._x += (targetX - clip._x) / friction;			ufoCheck();		}	}	private function moveRight() {		if (targetX <= Stage.width - (clip._width + 5) && Key.getCode() == 39) {			targetX += speed;		}	}	private function moveLeft() {		if (targetX >= (clip._width + 5) && Key.getCode() == 37) {			targetX -= speed;		}	}	private function shootBullet() {		if (Key.getCode() == 32) {			if (bullet == undefined) {				bullet = new Bullet(classScope, clip._x, clip._y);			} else if (bullet.getClip()._x == undefined) {				bullet.fire(clip._x, clip._y);			}		}	}	private function ufoCheck():Void {		if (active) {			var ufosArr:Array = classScope.ufoManager.activatedUfos;			for (var i:Number = 0; i < ufosArr.length; i++) {				if (clip.hitTest(ufosArr[i].getClip().hiddenHitTest)) {					hit();					ufosArr[i].dropUfo();					return;				}			}		}	}	private function hit():Void {		active = false;		resetSpeed();		new Tween(clip, "_xscale", mx.transitions.easing.Regular.easeOut, clip._xscale, 30, 2, true);		new Tween(clip, "_yscale", mx.transitions.easing.Regular.easeOut, clip._yscale, 30, 2, true);		new Tween(clip, "_rotation", mx.transitions.easing.Regular.easeOut, clip._rotation, 1080, 2, true);		var alphaTween:Tween = new Tween(clip, "_alpha", mx.transitions.easing.Regular.easeOut, clip._alpha, 0, 2, true);		alphaTween.onMotionFinished = Delegate.create(this, reset);		classScope.countDeath();	}	private function reset():Void {		active = true;		clip._xscale = 100;		clip._yscale = 100;		clip._alpha = 100;	}	public function pauseShip():Void {		paused = true;	}	public function resumeShip():Void {		paused = false;	}	//	public function setSpeed(num:Number):Void {		speed = num;	}	public function speedBoost():Void {		speed += 20;		clip.gotoAndPlay("boost");	}	public function resetSpeed():Void {		speed = baseSpeed;		clip.gotoAndStop("static");	}}