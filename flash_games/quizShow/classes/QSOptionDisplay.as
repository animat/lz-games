import mx.utils.Delegate;import mx.transitions.Tween;class QSOptionDisplay extends StimulusDisplay {	private var classScope:RunGame;	private var rightBoundary:Number;	private var topBoundary:Number;	private var manager:OptionManager;		public function QSOptionDisplay(target:MovieClip, id:String, stim:Stimulus, classScope:RunGame) {		super(target, id, stim);		this.classScope = classScope;		clip.btn = clip.attachMovie("optionBtn", "optionBtn", clip.getNextHighestDepth());		clip.btn._x = -25;		clip.onRelease = Delegate.create(this, selectOption);	}		private function selectOption():Void {		clip.btn._visible = false;		classScope.characterPressButton();		manager.hideAllOptionsExcept(this);		clip.swapDepths(LZGame.getStage().getNextHighestDepth()); // not working...		delete clip.onRollOver;		delete clip.onRollOut;		if (getStimulus().getType() == "TEXT") {			var twn:Tween = new Tween(clip, "_xscale", mx.transitions.easing.Regular.easeOut, clip._xscale, clip._xscale + 50, 1, true);			new Tween(clip, "_yscale", mx.transitions.easing.Regular.easeOut, clip._yscale, clip._yscale + 50, 1, true);			new Tween(clip, "_x", mx.transitions.easing.Regular.easeOut, clip._x, clip._x - (clip._width / 4), 1, true);			twn.onMotionFinished = Delegate.create(this, evaluate);		} else {			var twn:Tween = new Tween(clip, "_x", mx.transitions.easing.Regular.easeOut, clip._x, clip._x, 1, true);			twn.onMotionFinished = Delegate.create(this, evaluate);		}	}		private function evaluate():Void {		classScope.evaluate(this);	}		public function slideAndHide():Void {		var twn:Tween = new Tween(clip, "_y", mx.transitions.easing.Regular.easeOut, clip._y, clip._y + 50, .3, true);		new Tween(clip, "_alpha", mx.transitions.easing.Regular.easeOut, clip._alpha, 0, 0.25, true);		twn.onMotionFinished = Delegate.create(this, reset);	}	public function momentaryFade():Void {		clip.enabled = false;		var twn:Tween = new Tween(clip, "_alpha", mx.transitions.easing.Regular.easeOut, 100, 50, 1.95, true);		twn.onMotionFinished = Delegate.create(this, returnFromMomentaryFade);	}	private function returnFromMomentaryFade():Void {		var twn:Tween = new Tween(clip, "_alpha", mx.transitions.easing.Regular.easeOut, 50, 100, .3, true);		twn.onMotionFinished = Delegate.create(this, resetEnabled);	}	private function resetEnabled():Void {		clip.enabled = true;	}		private function setDefaultTextFormat():Void {		txtFmt = new TextFormat("EmbedArial", 14, 0xFFFFFF);		txtField.selectable = false;		txtField.embedFonts = true;		txtField.autoSize = true;		txtField.setTextFormat(txtFmt);	}		private function restrainDimensions():Void {		if (clip._width > maxWidth || clip._height > maxHeight) {			if (clip._width > clip._height) {				clip._width = maxWidth;				clip._yscale = clip._xscale;			} else {				clip._height = maxHeight;				clip._xscale = clip._yscale;			}			origXScale = clip._xscale;			origYScale = clip._yscale;			clip.onRollOver = Delegate.create(this, magnify);			clip.onRollOut = Delegate.create(this, recover);		}		clip.onRelease = Delegate.create(this, selectOption);	}		public function setPos(xx:Number, yy:Number):Void {		clip._x = xx;		if (getStimulusType() == Stimulus.TEXT) {			clip._y = yy + 3;		} else if (getStimulusType() == Stimulus.IMAGE) {			clip._y = yy - 13;		} else {			clip._y = yy;		}	}	public function setManager(man:OptionManager):Void {		manager = man;	}}