class CardManager {	//	private var classScope:RunGame;	private var cards:Array;	private var cardsDisplayed:Number;	private var pairs:Array;	private var holder:MovieClip;	private var flipFX:MovieClip;	//	public function CardManager(classScope:RunGame, qList:QuestionList) {		this.classScope = classScope;		cards = new Array();		pairs = new Array();		holder = LZGame.getStage().createEmptyMovieClip("cardHolder", LZGame.getStage().getNextHighestDepth());		holder._x = 20;		holder._y = 0;		flipFX = LZGame.getStage().attachMovie("_swish.mp3", "flipFX", LZGame.getStage().getNextHighestDepth());		cardsDisplayed = Math.min(qList.getQTotal() * 2, 20);		createCards(qList);		placeCards();	}	public function createCards(qList:QuestionList):Void {		var counter:Number = 0;		for (var i:Number = 0; i < cardsDisplayed / 2; i++) {			var q:Card = new Card(this, holder, counter, qList.getQByIndex(i).getStimulus());			counter++;			var a:Card = new Card(this, holder, counter, qList.getQByIndex(i).getResponses()[0].getStimulus());			counter++;			pairs.push({question: q, answer: a});			cards.push(q);			cards.push(a);		}	}	public function placeCards():Void {		var rows:Number = (cardsDisplayed < 16) ? 3 : 4;		var cardsPerRow:Number = (rows < 4) ? Math.ceil(cardsDisplayed / rows) : 5;		var cardsRemainder:Number = Math.floor(cardsDisplayed % rows);		trace("There will be "+rows+" rows, "+cardsPerRow+" per row with "+cardsRemainder+" left over");		var avgX:Number = Math.floor(530 / cardsPerRow);		var xPos:Number = 0;		var yPos:Number = 0;		var randomOrder:Array = randomizeOrder(cards);		for (var i:Number = 0; i < cardsDisplayed; i++) {			randomOrder[i].setPos(xPos, yPos);			xPos += avgX;			if ((i + 1) % cardsPerRow == 0) {				xPos = 0;				yPos += 72;			}		}	}	private function randomizeOrder(orig:Array):Array {		var rndmOrder:Array = new Array();		while(orig.length > 0) {			var rndm:Number = Math.round(Math.random() * (orig.length - 1));			rndmOrder.push(orig[rndm]);			orig.splice(rndm, 1);		}		return rndmOrder;	}	public function attemptAnswer(card:Card):Void {		if(!LZGame.isBusy()) {			flipFX.gotoAndPlay(2);			if (card.isHidden()) {				classScope.attemptAnswer(card);				card.flip();			} else {				card.flip();				classScope.continuePlaying();			}		}	}	public function findMatch(q:Card, a:Card):Boolean {		for (var i:Number = 0; i < pairs.length; i++) {			if (pairs[i].question == q || pairs[i].answer == q) {				if (pairs[i].question == a || pairs[i].answer == a) {					pairs.splice(i, 1);					return true;				}			}		}		return false;	}	public function destroyCards():Void {		//	}	//	public function getCardsDisplayed():Number {		return cardsDisplayed;	}	public function getPairsLeft():Number {		return pairs.length;	}}