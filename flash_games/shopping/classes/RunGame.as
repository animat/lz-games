import mx.utils.Delegate;//class RunGame extends LZGame implements gametypes.TranslationGame {	//	public var currentQNum:Number;	public var totalQNum:Number;	public var foodItemManager:FoodItemManager;	public var groceryList:GroceryList;	public var boy:Boy;	public var timer:Timer;	private var currentAttempt:FoodItem;	private var winWaitInterval:Number;	//	private var correctFX:MovieClip;	private var incorrectFX:MovieClip;	//	public function RunGame(main:MovieClip) {		super(main);		//		var maxItemCount:Number = 9;		foodItemManager = new FoodItemManager(this, questionList.getQArray(), maxItemCount);		boy = new Boy(main);		groceryList = new GroceryList(main, questionList.getQArray(), maxItemCount);		timer = new Timer(this);		//		currentQNum = 0;		totalQNum = groceryList.getTotalQNum();		//		correctFX = main.attachMovie("_whish.mp3", "correctFX", main.getNextHighestDepth());		incorrectFX = main.attachMovie("_snap.mp3", "incorrectFX", main.getNextHighestDepth());		//		timer.setCount(15);		nextQuestion(false);	}	public function nextQuestion(proceed:Boolean):Void {		if (proceed) {			currentQNum++;		}		if (currentQNum == totalQNum) {			winWait();			return;		}		refreshQDisplay();	}	public function refreshQDisplay(resetTxtField:Boolean):Void {		groceryList.highlightCheckListItem(currentQNum);	}	public function setCurrentAttempt(attempt:FoodItem):Void {		currentAttempt = attempt;	}	public function evaluate():Void {		if (questionList.getQByIndex(currentQNum).evaluate(new Response(currentAttempt.getStimulus().getContent(), currentAttempt.getStimulus().getType()))) {			correctAnswer();		} else {			incorrectAnswer();		}	}	public function correctAnswer():Void {		groceryList.checkItem(currentQNum);		foodItemManager.correctFoodItemAnim(currentQNum);		timer.addSeconds(10);		correctFX.gotoAndPlay(2);		nextQuestion(true);	}	public function incorrectAnswer():Void {		currentAttempt.incorrectAnim();		incorrectFX.gotoAndPlay(2);	}	public function resetAll():Void {		currentQNum = 0;		timer.setCount(15);		foodItemManager.resetFoodItems();		groceryList.resetList();		groceryList.highlightCheckListItem(currentQNum);	}	private function winWait():Void {		winWaitInterval = setInterval(this, "winGame", 4000);		timer.pauseCountDown();	}	public function winGame():Void {		clearInterval(winWaitInterval);		main.gotoAndStop("win");		groceryList.destroy();		boy.destroy();		main.finalScore = timer.getTimeLeft();		trace(main.finalScore+" :: "+timer.getTimeLeft());		timer.destroy();		foodItemManager.destroyAllFoodItems();	}	public function getScore():String {		return String(timer.getTimeLeft());	}		public function pauseGame():Void {		timer.pauseCountDown();	}	public function resumeGame():Void {		timer.beginCountDown();	}}