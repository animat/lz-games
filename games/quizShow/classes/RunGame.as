import mx.utils.Delegate;import flash.external.ExternalInterface;//class RunGame extends LZGame implements gametypes.MultipleChoiceGame {	private var qStimDisplay:StimulusDisplay;	private var optionManager:OptionManager;	private var character:MovieClip;	private var panel:MovieClip;	private var maxPoints:Number;	private var awardPoints:Number;	private var decreasePoints:Number;	private var addPointsDelay:Number;	private var score:Score;	private var applauseFX:MovieClip;	private var wrongFX:MovieClip;	private var winFX:MovieClip;		public function RunGame(main:MovieClip) {		super(main);				optionManager = new OptionManager();		createLandscape();		score = new Score();				maxPoints = 10;				applauseFX = LZGame.getStage().attachMovie("_applause.mp3", "_applause.mp3", LZGame.getStage().getNextHighestDepth());		wrongFX = LZGame.getStage().attachMovie("_wrong.mp3", "_wrong.mp3", LZGame.getStage().getNextHighestDepth());		winFX = LZGame.getStage().attachMovie("_winApplause.mp3", "_winApplause.mp3", LZGame.getStage().getNextHighestDepth());				LZGame.setInstance(this);		nextQuestion(false);	}		private function createLandscape():Void {		character = LZGame.getStage().attachMovie(LZGame.getStage().character, "character", LZGame.getStage().getNextHighestDepth(), {_x:533, _y:238});		character._xscale = character._yscale = 65;		character.stop();				panel = main.panel;	}		public function nextQuestion(proceed:Boolean):Void {		if (proceed == "true" || proceed == true) {			questionList.increaseQNum();		}		if (questionList.getQuestionsLeft() == 0) {			winGame();		}		if (addPointsDelay != null) {			clearInterval(addPointsDelay);		}		if (character._currentframe != 1) {			character.gotoAndPlay("hang_up");		}		panel.gotoAndPlay("show");		TimelineManager.registerClip(panel, this, refreshQDisplay, [], "static");		awardPoints = maxPoints;		decreasePoints = maxPoints / questionList.getCurrentQ().getOptions().length;	}		public function refreshQDisplay():Void {		if (qStimDisplay != null) {			qStimDisplay.reset();		}		qStimDisplay = new StimulusDisplay(LZGame.getStage(), "qStimDisplay", questionList.getCurrentQ().getStimulus());		qStimDisplay.setPos(180, 85);				optionManager.resetOptions();		optionManager.setOptions(questionList.getCurrentQ().getOptions());	}		public function characterPressButton():Void {		character.gotoAndPlay("press_button");	}		public function evaluate(attempt:Object):Boolean {		var userResponse:Response = new Response();		userResponse.setStimulusFull(attempt.getStimulus());		applauseFX.gotoAndStop(1);		wrongFX.gotoAndStop(1);		if (questionList.getCurrentQ().evaluate(userResponse)) {			correctAnswer(attempt);			return true;		} else {			incorrectAnswer(attempt);			return false;		}	}		public function correctAnswer(attempt:Object):Void {		character.gotoAndPlay("pick_up");		panel.gotoAndPlay("hide");		optionManager.resetOptions();		qStimDisplay.reset();		TimelineManager.registerClip(panel, this, addPoints, [], "hidden");		applauseFX.gotoAndPlay(2);	}	public function addPoints():Void {		addPointsDelay = setInterval(this, "nextQuestion", 3500, true);		score.addToScore(Math.ceil(awardPoints));	}	public function incorrectAnswer(attempt:Object):Void {		awardPoints -= decreasePoints;		attempt.slideAndHide();		character.gotoAndPlay("incorrect");		wrongFX.gotoAndPlay(2);	}	public function winGame():Void {		panel.removeMovieClip();		character.removeMovieClip();		score.destroy();		LZGame.getStage().gotoAndStop("win");		LZGame.getStage().finalScore.text = ""+score.getScore();		winFX.gotoAndPlay(2);	}	public function getScore():String {		return String(score.getScore());	}}