import mx.utils.Delegate;import mx.flash.ExternalInterface;//class RunGame extends LZGame implements gametypes.MatchingGame {	public var difficulty:Number;	public var ship:Ship;	private var controlPanel:ControlPanel;	private var indicator:MovieClip;	public var ufoManager:UfoManager;	private var starfield:Starfield;	private var score:Score;	private var deaths:Number;	private var correctStreak:Number;	private var ufoShakeFX:MovieClip;	private var explodeFX:MovieClip;	private var dieFX:MovieClip;	//	public function RunGame(main:MovieClip) {		super(main);		difficulty = main.difficultySelection;		//		ship = new Ship(this);		starfield = new Starfield(main);		ufoManager = new UfoManager(this, questionList.getOptions());		//		var panel:MovieClip = main.attachMovie("panel", "panel", main.getNextHighestDepth());		controlPanel = new ControlPanel(panel);		indicator = main.attachMovie("indicator", "indicator", main.getNextHighestDepth(), {_x:180, _y:140});		score = new Score(panel.score);		//		deaths = 0;		correctStreak = 0;		//		ufoShakeFX = main.attachMovie("_twang.mp3", "ufoShakeFX", main.getNextHighestDepth());		explodeFX = main.attachMovie("_explode.mp3", "explodeFX", main.getNextHighestDepth());		dieFX = main.attachMovie("_whoosh.mp3", "dieFX", main.getNextHighestDepth());		//		nextQuestion(false);	}	public function nextQuestion(proceed:Boolean):Void {		if (proceed == true || proceed == "true") {			questionList.increaseQNum();		}		if (questionList.getQuestionsLeft() > 0) {			refreshQDisplay();		} else {			winGame();		}	}	public function refreshQDisplay():Void {		// *** TODO: Use a StimDisplay instead of a text field		main.panel.question_txt = questionList.getCurrentQ().getStimulus().getContent();		ufoManager.resetAllUfos();	}	public function evaluate(attempt:Object):Void {		var userResponse:Response = new Response();		userResponse.setStimulusFull(attempt.getOption().getStimulus());		if (questionList.getCurrentQ().evaluate(userResponse)) {			attempt.explodeUfo();			correctAnswer();		} else {			attempt.failedAttempt();			incorrectAnswer();		}	}	public function correctAnswer():Void {		correctStreak++;		if (correctStreak == 2) {			ship.speedBoost();			controlPanel.activateTurbo();		}		score.increaseScore(5);		explodeFX.gotoAndPlay(2);		nextQuestion(true);	}	public function incorrectAnswer():Void {		if (correctStreak >= 2) {			correctStreak = 0;			ship.resetSpeed();		}		ufoShakeFX.gotoAndPlay(2);	}	public function countDeath():Void {		correctStreak = 0;		deaths++;		if (deaths < 4) {			controlPanel.countDeath(deaths);					} else {			loseGame();		}		dieFX.gotoAndPlay(2);	}	public function winGame():Void {		controlPanel.destroy();		indicator.removeMovieClip();		ufoManager.disableUfos();		main.gotoAndPlay("win");	}	public function getScore():String {		return String(deaths);	}	public function loseGame():Void {		controlPanel.destroy();		indicator.removeMovieClip();		ufoManager.disableUfos();		main.gotoAndPlay("lose");	}		public function runMoveToEnd ():Void {		movetoend ();		refreshQDisplay ();	}	public function pauseGame():Void {		ufoManager.pauseUfos();		starfield.pauseStars();		ship.pauseShip();	}	public function resumeGame():Void {		ufoManager.resumeUfos();		starfield.resumeStars();		ship.resumeShip();	}}