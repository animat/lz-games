import mx.utils.Delegate;import flash.external.ExternalInterface;import toolbarcomponent.core.ForeignCharacters;//class RunGame extends LZGame implements gametypes.TranslationGame {	// Relevant movie clips	private var frog:MovieClip;	private var holder:MovieClip;	// Relevant text fields	private var inputText:utilities.LZInputText;	private var qDisplay:StimulusDisplay;	private var foreignChars;		// Array for objects containing lilly pad info	private var lillypads:Array;	// Timer	private var timer:Timer;/*Timer*/	// Sound effects	private var correctFX:MovieClip;	private var incorrectFX:MovieClip;	// Static variables	private static var friction:Number = 13;	//	public function RunGame (main:MovieClip) {		super (main);		//		if (inputText != undefined) {			inputText.destroy();		}		inputText = new utilities.LZInputText(main, "inputText", 130, 23);		inputText.setPos(322, 44);		correctFX = main.attachMovie("_boing.mp3", "correctFX", main.getNextHighestDepth());		incorrectFX = main.attachMovie("_slide.mp3", "incorrectFX", main.getNextHighestDepth());		//		foreignChars = new ForeignCharacters (language, main, 200, Stage.height + 30, 200, null);		//		lillypads = new Array ();		createLandscape ();		createFrog ();		timer = new Timer (this, 80, 350, 85);		//		main.tryBtn.onRelease = Delegate.create (this, evaluate);		//		Animator.registerTWN (main.fish);		Animator.registerTWN (main.birds);		Animator.registerTWN (main.frog);		Animator.registerEFA (this,main.frog,frogAniFunction,"frogAniFunction");				nextQuestion (false);	}	//	// Attach clips to the stage, prepare the game	private function createLandscape ():Void {		// Create holder movie clip		holder = main.createEmptyMovieClip ("holder", 5);		// Attach the left side of the pond inside the holder		holder.attachMovie ("land_left","land_left",6);		holder.land_left._x = 0;		holder.land_left._y = 122;		// For loop attaching each lillypad inside the holder (except for the last question)		for (var i:Number = 0; i < questionList.getQTotal () - 1; i++) {			var rndm:Number = Math.round (150 + random (350 - 150));			var newX:Number = (holder.land_left._x + 350) + (150 * i);			var scaler:Number = Math.round (30 + ((rndm / (Stage.height)) * 100));			//			holder.attachMovie ("pad","lillypad_" + i,i + 200);			//			holder["lillypad_" + i]._x = newX;			holder["lillypad_" + i]._y = rndm;			//			holder["lillypad_" + i]._yscale = scaler + 50;			holder["lillypad_" + i]._xscale = scaler + 50;			//			lillypads.push ({xPos:newX, yPos:(rndm - 20), scaler:scaler});		}		// Attach the right side of the pond for the last question		holder.attachMovie ("land_left","land_right",7);		holder.land_right._xscale = -100;		holder.land_right._x = newX + 350;		holder.land_right._y = 122;	}	private function createFrog ():Void {		// Attach frog, set position		frog = main.attachMovie ("frog", "frog", 10);		frog._x = 130;		frog._y = 160;		// Set up vars before movement begins		frog.endX = frog._x;		frog.endY = frog._y;		frog.startY = frog._y;		frog.endScaleX = frog._xscale;		frog.endScaleY = frog._yscale;		holder.endX = holder._x;	}	private function frogAniFunction () {		holder._x += (holder.endX - holder._x) / friction;		frog._x += (frog.endX - frog._x) / friction;		frog._y += (frog.endY - frog._y) / friction;		frog._xscale += (frog.endScaleX - frog._xscale) / friction;		frog._yscale += (frog.endScaleY - frog._yscale) / friction;		checkInput();	}	//	// Proceed to the next question or keep qNum as is, refresh the display	public function nextQuestion (proceed:Boolean):Void {		if (proceed == "true" || proceed == true) {			questionList.increaseQNum ();		}		if (timer.isPaused ()) {			timer.resumeTimer ();		}		refreshQDisplay (true);	}	//	// Refresh the displays of the question/ answer info without any animating	public function refreshQDisplay (resetTxtField:Boolean):Void {		if (resetTxtField && !inputText.isAnimating()) {			//inputText.clearText();			//inputText.enable();		}		if (qDisplay.getStimulus () != questionList.getCurrentQ ().getStimulus ()) {			if (qDisplay != null) {				qDisplay.reset ();			}			qDisplay = new LFQuestionDisplay (main, "qDisplay", questionList.getCurrentQ ().getStimulus ());			qDisplay.setDim (50,50);			qDisplay.setPos (265,43);		}	}	//	// Control hints display, overriding the LZGame methods	public function checkInput ():Void {		if (Key.isDown (Key.ENTER)) {			evaluate ();		}	}	public function evaluate ():Void {		if (!timer.isPaused()) {			inputText.displayFeedback(questionList.getCurrentQ().getResponses()[0].getStimulus().getContent());			if (questionList.getCurrentQ ().evaluate (new TypedInput (inputText.getInput()))) {				correctAnswer ();			} else {				incorrectAnswer ();			}		}	}	// Control reactions for correct and incorrect answers	public function correctAnswer ():Void {		correctFX.gotoAndPlay(2);		timer.pauseTimer ();		var num:Number = questionList.getQNum ();		if (num == 0) {			TimelineManager.registerClip (frog,this,nextQuestion,[true]);			frog.endX = lillypads[num].xPos;			frog.endY = lillypads[num].yPos;			frog.endScaleX = lillypads[num].scaler;			frog.endScaleY = lillypads[num].scaler;			frog.gotoAndPlay ("jump");		} else if (questionList.getQuestionsLeft () == 1) {			TimelineManager.registerClip (frog,this,winGame,[]);			frog.endX = 500;			main.arrow._visible = false;			frog.endY = frog.startY;			frog.endScaleX = 100;			frog.endScaleY = 100;			holder.endX = 0 - holder._width + 650;			frog.gotoAndPlay ("jump");		} else {			TimelineManager.registerClip (frog,this,nextQuestion,[true]);			holder.endX -= 150;			frog.endY = lillypads[num].yPos;			frog.endScaleX = lillypads[num].scaler;			frog.endScaleY = lillypads[num].scaler;			frog.gotoAndPlay ("jump");		}	}	public function incorrectAnswer ():Void {		incorrectFX.gotoAndPlay (2);		frog.gotoAndPlay ("incorrect");	}	public function winGame ():Void {		timer.stopTimer ();		timer.setAlpha (100);		timer.setScalePos (135);		removeMovieClip (holder);		removeMovieClip (frog);		qDisplay.reset ();		inputText.destroy();		main.gotoAndPlay ("win");	}	public function getScore():String {		return timer.getTime();	}	//	public function runMoveToEnd ():Void {		movetoend ();		refreshQDisplay (true);	}	public function runGiveUp ():Void {		timer.addSeconds(10);		giveup (this,correctAnswer);	}	public function runNextLetter ():Void {		timer.addSeconds(3);		nextLetter (inputText.getTextField()); // TODO : Test me!	}	public function pauseGame ():Void {		Animator.pauseAni ();		inputText.disable();		timer.pauseTimer ();	}	public function resumeGame ():Void {		Animator.resumeAni ();		inputText.enable();		timer.resumeTimer ();	}		public function destroy():Void {		timer.deleteTimer();		inputText.destroy();		questionList.setQNum(0);		delete this;		trace("Leap Frog :: RunGame :: destroyed")	}}