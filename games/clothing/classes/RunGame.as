import flash.geom.ColorTransform;import flash.geom.Transform;import mx.controls.RadioButton;/** * @className	RunGame * @author		Samit Basak * @purpose 	Main controller of the game class.*/class RunGame extends LZGame implements gametypes.MatchingGame {	// __busy: This variable hold the busy state of the game	private var __busy:Boolean;	public var thumbnailPanel:ThumbnailPanel;	public var character:Character;	public var main:MovieClip;	private var __ModeOfGame:Number = 0;	// 0 - when user can play with freedom. 1 - user is to answer specific question	private var __answer:String;	private var __answerCategoryCloth:String;	private var __answerColor:String;	private var __answerCharacter:String;	private var __currentSelectedCategory:MovieClip;	/**	Constructor of the RunGame	@param		main	This is the reffernce of the root movieClip	@return 			no return value	*/	public function RunGame(main:MovieClip) {		super(main);		this.main = main;		main.question_mc.question = "";		main.question_mc.gotoAndStop(1);		__busy = false;		thumbnailPanel = new ThumbnailPanel(this, questionList.getOByIndex(0).toString(), questionList.getOByIndex(1).toString());		characterName = "boy";		setModeOfGame(0);		if (questionList.getQTotal() > 0) {			modeOneFinished();		}		main.finishBtn.main = this;		main.finishBtn.onRelease = modeOneFinished;		main.finishBtn._visible = true;		initiateCharacterChooser();	}	/**	initiateCharacterChooser - initating the radio button for character chooser	@param 	no parameter 	@return no return value	*/	private function initiateCharacterChooser():Void {		var rbListener:Object = new Object();		rbListener.main = this;		rbListener.click = function(evt_obj:Object) {			if (evt_obj.target.selection == main.main.boyRb) {				main.characterName = "boy";			} else if (evt_obj.target.selection == main.main.girlRb) {				main.characterName = "girl";			}		};		// Add listener.		main.characterRadio.addEventListener("click", rbListener);		main.boyRb._visible = true;		main.girlRb._visible = true;	}	/**	characterName - set the character name and load the corresponding character	@param c 	string 	name of the chracter	@return 	no return value	*/	public function set characterName(c:String):Void {		__answerCharacter = c;		if (character != undefined) {			delete (character);		}		character = new Character(this, __answerCharacter);	}	/**	modeOneFinised - function called when mode one of the game has been finished	@param		no parameter	@return 	no return value	*/	private function modeOneFinished():Void {		this.main.refreshQDisplay();		this.main.setModeOfGame(1);		this.main.main.thumbnailPanel.clothTabBtn.onRelease();		this.main.main.finishBtn._visible = false;	}	/**	modeTwoFinished - function called when mode two of the game has been finished	@param 		no parameter	@return 	no return value	*/	private function modeTwoFinished():Void {		this.main.main.finishBtn._visible = false;		this.main.winGame();	}	/**	answerCategoryCloth - checkes the category of the answer with the expected one	@param 	category 	string 	category of the answer	@param	name		string	name of the cloth	@param	file		string 	name of the file contain the graphics of the cloth	*/	public function answerCategoryCloth(category:String, name:String, file:String):Void {		if (__ModeOfGame == 1) {			var tmp:String = category+"."+name;			if (tmp == questionList.getCurrentQ().getAnswer()[1].getStimulus()) {				__answerCategoryCloth = tmp;				var m:MovieClip = character.setDress(file, category, name, true);				if (m.correctClothSelection) {					__currentSelectedCategory = m;					main.thumbnailPanel.colorTabBtn.onRelease();					correctAnswer();				}			} else {				character.setWrongDress(file, category, name);				incorrectAnswer();			}					} else {			__currentSelectedCategory = character.setDress(file, category, name, false);		}		__currentSelectedCategory.onRelease();	}	/**	currentSelectedCategory - setter function to set the currently selected category moviclip 	@param 	m	movieClip	movieClip of the category selected	@param 					no return value	*/	public function set currentSelectedCategory(m:MovieClip):Void {		__currentSelectedCategory = m;	}	/**	answerColor - checks the answer with te expected result and take necessary action	@param 	name 	String 			name of the color has been selected	@param 	ct		ColorTransform 	color transform value of the selected color	@return 						no return value	*/	public function answerColor(name:String, ct:ColorTransform):Void {		if (!__busy) {			if (__ModeOfGame == 1) {				__answerColor = name;				if (__answerCategoryCloth == questionList.getCurrentQ().getAnswer()[1].getStimulus()) {					if (__answerColor == questionList.getCurrentQ().getAnswer()[2].getStimulus()) {						character.setTransformation(__currentSelectedCategory, ct, true);						nextQuestion(true);						correctAnswer();						main.thumbnailPanel.clothTabBtn.onRelease();					} else {						character.setWrongTransformation(__currentSelectedCategory, ct);						incorrectAnswer();					}				}			}		}		character.setTransformation(__currentSelectedCategory, ct, false);	}	/**	setModeOfGame - sets te mode of the game 	@param 		n	number 	mode of the game	@praam 			no return value	*/	public function setModeOfGame(n:Number):Void {		__ModeOfGame = n;		if (__ModeOfGame == 0) {			thumbnailPanel.setTextVisible(true);					}		if (__ModeOfGame == 1) {			main.question_mc.gotoAndPlay(2);			/// Mode 2 of the game starts here			thumbnailPanel.setTextVisible(false);			this.character.resetDress();						main.boyRb._visible =false;		    main.girlRb._visible =false;		}	}	/**	ModeOfGame	- getter function returns the mode of the game	@param 				no parameter	@return 	Number 	mode of the game	*/	public function get ModeOfGame():Number {		var tmp:Number = __ModeOfGame;		return tmp;	}	/**	nextQuestion function is used to move to next question	@param		proceed	 	indicate wheter to move in next question or not	@return 				no return value	*/	public function nextQuestion(proceed:Boolean):Void {		if (proceed) {			questionList.increaseQNum();		}		if (questionList.getIsValid(questionList.getQNum())) {			setBusy();			refreshQDisplay();		} else {			main.finishBtn.onRelease = modeTwoFinished;			main.question_mc.question = " Thank you !!!";			setModeOfGame(0);			main.finishBtn._visible = true;		}	}	/**	refreshQdisplay function is used to refresh the state of the game on screen	@param		no parameter	@return 	no return value	*/	public function refreshQDisplay():Void {		// Update the new question in the screen		main.question_mc.gotoAndPlay(1);		main.question_mc.question = questionList.getCurrentQ().getStimulus();		resetBusy();	}	/**	evaluate function is used to evaluate the users option	@parameter	attempt Object	this is the answer object choose by the user 	@return 					no return value	*/	public function evaluate(attempt:Object):Void {	}	/**	correctAnswer function is responsible to initiate all the action on correct answer	@param		no parameter	@return 	no return value	*/	public function correctAnswer():Void {		trace("Correct Answer");	}	/**	incorrectAnswer function is responsible to initate all the action on incorrect answer	@param		no parameter	@return 	no return value	*/	public function incorrectAnswer():Void {		trace("Wrong choice");	}	/**	setBusy function set the busy state of the game	@param		no parameter	@return		no return value	*/	public function setBusy():Void {		if (__busy == false) {			__busy = true;		}	}	/**	busy is a getter function to return the busy state of the game	@parameter	no parameter	@return 	returns the games busy state	*/	public function get busy():Boolean {		var tmp:Boolean = __busy;		return tmp;	}	/**	resetBusy function reset the busy state to make it not busy	@parameter	no parameter	@return 	no return value	*/	public function resetBusy():Void {		__busy = false;	}	/**	winGame	function responsible to take actions on wining the game	@parameter	no parameter	@return 	no return value	*/	public function winGame():Void {		__ModeOfGame = 0;		//main.question.text = "Congratulations!!!!";		main.gotoAndPlay("win");	}	/**	replayGame function is used to restart the game	@parameter		no parameter	@return 		no return value	*/	public function replayGame():Void {		main.gotoAndPlay("intro");	}	/**	destroy function used to delete the object of the class	@parameter					no parameter	@return 		boolean 	returns the result in boolean form	*/	public function destroy():Boolean {		destroy(thumbnailPanel);		return delete (this);	}}