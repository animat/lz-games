import mx.utils.Delegate;import mx.transitions.Tween;class Phrase {	private var clip:MovieClip;	private var growClip:MovieClip;	private var holder:MovieClip;	private var str:String;	private var leafClip:MovieClip;	private var highlighted:Boolean;	private var defaultFmt:TextFormat;	private var highlightFmt:TextFormat;		public function Phrase(holder:MovieClip, id:Number, str:String) {		this.holder = holder;		this.str = str;		highlighted = false;		defaultFmt = new TextFormat("EmbedArial", 14, 0xFFFFFF);		highlightFmt = new TextFormat("EmbedArial", 14, 0x5CB4A2);				clip = holder.createEmptyMovieClip("phrase_"+id, holder.getNextHighestDepth());		clip.createTextField("txtField", clip.getNextHighestDepth(), 0, 0, 100, 100);		clip.txtField.text = str;		formatTextField(clip.txtField);				clip.onEnterFrame = Delegate.create(this, highlighting);	}		private function highlighting():Void {		if (clip.hitTest(leafClip.pointer)) {			clip.txtField.setTextFormat(highlightFmt);			highlighted = true;		} else {			clip.txtField.setTextFormat(defaultFmt);			highlighted = false;		}	}		public function grow():Void {		growClip = RunGame.getStage().createEmptyMovieClip("grow", RunGame.getStage().getNextHighestDepth());		growClip._x = holder._x + clip._x;		growClip._y = holder._y + clip._y;		growClip.createTextField("txtField", growClip.getNextHighestDepth(), 0, 0, 100, 100);		growClip.txtField.text = str;		formatTextField(growClip.txtField);		var growFactor:Number = 3;		var xsTwn:Tween = new Tween(growClip, "_xscale", mx.transitions.easing.Regular.easeOut, 100, 100 * growFactor, 1, true);		var xTwn:Tween = new Tween(growClip, "_x", mx.transitions.easing.Regular.easeOut, 									growClip._x, (growClip._x - (growClip._width * (growFactor / 2))), 1, true);		var ysTwn:Tween = new Tween(growClip, "_yscale", mx.transitions.easing.Regular.easeOut, 100, 100 * growFactor, 1, true);		var yTwn:Tween = new Tween(growClip, "_y", mx.transitions.easing.Regular.easeOut, 									growClip._y, (growClip._y - ((growClip._height / 2) * (growFactor / 2))), 1, true);		var aTwn:Tween = new Tween(growClip, "_alpha", mx.transitions.easing.Regular.easeOut, 100, 0, 1, true);		aTwn.onMotionFinished = Delegate.create(this, destroyGrowClip);	}	private function destroyGrowClip():Void {		removeMovieClip(growClip);	}		private function formatTextField(txt:TextField):Void {		txt.setTextFormat(defaultFmt);		txt.autoSize = true;		txt.selectable = false;		txt.embedFonts = true;		txt._quality = "BEST";	}		public function destroy():Void {		delete clip.onEnterFrame;		removeMovieClip(clip);		delete this;	}		public function isHighlighted():Boolean {		return highlighted;	}	public function setPos(xx:Number, yy:Number):Void {		clip._x = xx;		clip._y = yy;	}	public function setLeafClip(mc:MovieClip):Void {		leafClip = mc;	}	public function getStr():String {		return str;	}	public function getClip():MovieClip {		return clip;	}}