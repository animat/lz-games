import mx.utils.Delegate;import flash.external.ExternalInterface;class RunGame extends LZGame implements gametypes.SentenceGame {	private var swishFX:MovieClip;	private var twistFX:MovieClip;	private var phraseManager:PhraseManager;	private var leaf:Leaf;	private var qStimDisplay:SSQuestionDisplay;	private var timer:SSTimer;	private var character:MovieClip;	private var spaceBarIsDownCounter:Number;	private var spaceBarIsDownMax:Number = 8;		public function RunGame(main:MovieClip) {		super(main);		setInstance(this);		swishFX = LZGame.getStage().attachMovie("_swish.mp3", "_swish.mp3", LZGame.getStage().getNextHighestDepth());		twistFX = LZGame.getStage().attachMovie("_twist.mp3", "_twist.mp3", LZGame.getStage().getNextHighestDepth());				phraseManager = new PhraseManager();		leaf = new Leaf(phraseManager.getHolder());		phraseManager.setLeafClip(leaf.getClip());		timer = new SSTimer();		character = RunGame.getStage().character;				character.onEnterFrame = Delegate.create(this, checkSpace);		spaceBarIsDownCounter = spaceBarIsDownMax;		timer.start();		nextQuestion(false);	}		private function checkSpace():Void {		if (Key.isDown(Key.SPACE) && spaceBarIsDownCounter > spaceBarIsDownMax) {			evaluate(phraseManager.getHighlightedPhrase());			spaceBarIsDownCounter = 0;		} else {			spaceBarIsDownCounter++;		}	}		public function nextQuestion(proceed:Boolean):Void {		if (proceed == true || proceed == "true") {			questionList.increaseQNum();			leaf.resetSpeed();			qStimDisplay.reset();			phraseManager.reset();					}		if (questionList.getQuestionsLeft() == 0) {			winGame();		}		refreshQDisplay();	}		public function refreshQDisplay():Void {		qStimDisplay = new SSQuestionDisplay(RunGame.getStage(), "qStimDisplay", questionList.getCurrentQ().getStimulus());		qStimDisplay.setPos(135, 50);		qStimDisplay.bounceIn();		phraseManager.createPhrases(questionList.getCurrentQ().getAttributes().sentence);		leaf.setBounds(phraseManager.getHolder());	}		public function evaluate(attempt:Object):Void {		var resp:Response = new Response(attempt.getStr(), "text");		if (questionList.getCurrentQ().evaluate(resp)) {			correctAnswer(attempt);		} else {			incorrectAnswer(attempt);		}	}		public function correctAnswer(attempt:Object):Void {		swishFX.play();		character.gotoAndPlay("correct");		phraseManager.growCurrentPhrase();		nextQuestion(true);	}		public function incorrectAnswer(attempt:Object):Void {		character.gotoAndPlay("incorrect");		timer.add(5);	}		public function winGame():Void {		twistFX.play();		timer.pause();		leaf.destroy();		//phraseManager.destroy();		//qStimDisplay.reset();		LZGame.getStage().gotoAndPlay("win");	}		public function getScore():String {		return String(timer.getTime());	}		public function pauseGame():Void {		leaf.pauseLeaf();		timer.pause();	}	public function resumeGame():Void {		leaf.resumeLeaf();		timer.start();	}	public function destroy():Void {		questionList.setQNum(0);		timer.destroy();	}	public function runMoveToEnd():Void {		movetoend();		leaf.resetSpeed();		qStimDisplay.reset();		phraseManager.reset();		refreshQDisplay();	}}