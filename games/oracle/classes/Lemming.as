import mx.utils.Delegate;//class Lemming {	private var manager:LemmingManager;	private var clip:MovieClip;	private var alive:Boolean;	private var hp:Number;	private var speed:Number;	private var state:String;	private var lastState:String;	private var transitioning:Boolean;	private var transitionWait:Number;	private var destination:Number;	private var arrived:Boolean;		public function Lemming(man:LemmingManager, index:Number) {		manager = man;		alive = true;		arrived = true;				lastState = "static";		state = "static";		transitioning = false;				clip.onEnterFrame = Delegate.create(this, runToDestination);	}		public function runToDestination():Void {		if (alive) {			updateDetails();		}	}		public function updateDetails():Void {		checkStates();		if (state == "run") {			setRunningPosition();		}	}		private function checkStates():Void {		if (!transitioning) {			if (clip._x > destination - speed && clip._x < destination + speed) {				arrived = true;				if (state != "static") {					setState("static");				}			} else {				arrived = false;				if (state != "run") {					setState("run");				}			}		}	}	private function setRunningPosition():Void {		if (!transitioning) {			if (clip._x < destination) {				clip._x += speed;				clip._xscale = 100;			}			if (clip._x > destination) {				clip._x -= speed;				clip._xscale = -100;			}		}	}	public function die():Void {		hp--;		if (hp > 0) {			if (transitioning) {				clearInterval(transitionWait);				transitioning = false;				setState("static");			}			setState("hurt");			transitioning = true;			transitionWait = setInterval(this, "finishedTransitioning", 500 + (Math.ceil(Math.random() * 300)));		} else {			transitioning = false;			clearInterval(transitionWait);			clip.gotoAndStop("dead_poof");			delete clip.onEnterFrame;			alive = false;		}	}		public function checkForCollision(proj:MovieClip):Boolean {		return clip.hitTest(proj);	}		public function setDestination(xPos:Number):Void {		var spread:Number = random(100);		spread -= 50;		destination = xPos + spread;		arrived = false;	}	private function setState(newSt:String):Void {		if (state != newSt) {			if (transitioning) {				clearInterval(transitionWait);				transitioning = false;			}			if (newSt == "run") {				randomNervousHesitation();			}			if (!transitioning) {				clip.gotoAndPlay(newSt);				lastState = state;				state = newSt;			}		}	}		private function randomNervousHesitation():Boolean {		var rndm:Number = Math.ceil(Math.random() * 200);		if (rndm == 1) {			lastState = state;			state = "nerve";			clip.gotoAndPlay(state);			transitioning = true;			transitionWait = setInterval(this, "finishedTransitioning", 1100 + Math.ceil(Math.random() * 250));			return true;		}		return false;	}	public function getY():Number {		return clip._y;	}	public function getClip():MovieClip {		return clip;	}	public function isAlive():Boolean {		return alive;	}	public function hasArrived():Boolean {		if (alive) {			return arrived;		}		return true;	}	public function finishedTransitioning():Void {		clearInterval(transitionWait);		transitioning = false;		setState(lastState);	}}