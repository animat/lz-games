import mx.utils.Delegate;import flash.external.ExternalInterface;import flash.display.BitmapData;//class RunGame extends LZGame implements gametypes.MultipleChoiceGame {	private var screenManager:ScreenManager;	private var lemmingManager:LemmingManager;	private var projectileManager:ProjectileManager;	private var projectileWait:Number;	private var badGuy:BadGuy;	private var oracle:Oracle;	private var questionDelay:Number;	private var correctAnswerDelay:Number;		public function RunGame(main:MovieClip) {		super(main);				screenManager = new ScreenManager();				lemmingManager = new LemmingManager();		projectileManager = new ProjectileManager();		badGuy = new BadGuy();		oracle = new Oracle();				LZGame.setInstance(this);		nextQuestion(false);	}		public function checkForCollisions(clip:MovieClip):Void {		lemmingManager.checkForCollisions(clip);		lemmingManager.updateLemmingCounter();	}		public function nextQuestion(proceed:Boolean):Void {		if (proceed == "true" || proceed == true) {			questionList.increaseQNum();		}		if (questionList.getQuestionsLeft() == 0) {			winGame();		}		badGuy.launchProjectile();		screenManager.resetOptions();		trace("just reset the options...");		oracle.clearSpeechBubble();		questionDelay = setInterval(this, "refreshQDisplay", 2500);	}		public function refreshQDisplay():Void {		clearInterval(questionDelay);		screenManager.setOptions(questionList.getCurrentQ().getOptions());		oracle.speak(questionList.getCurrentQ().getStimulus());		projectileWait = setInterval(this, "dropProjectiles", 5000);	}	private function dropProjectiles():Void {		clearInterval(projectileWait);		projectileManager.dropProjectiles(screenManager.getIncorrectScreens());	}		public function evaluate(attempt:Object):Boolean {		var userResponse:Response = new Response();		userResponse.setStimulusFull(attempt.getStimulus());		lemmingManager.setDestination(attempt.getPosition());		if (questionList.getCurrentQ().evaluate(userResponse)) {			correctAnswer(attempt);			return true;		} else {			incorrectAnswer(attempt);			return false;		}	}		public function correctAnswer(attempt:Object):Void {		trace("show happy, please");		oracle.showHappy();		correctAnswerDelay = setInterval(this, "checkForSafeLemmings", 500);	}	private function checkForSafeLemmings():Void {		if (lemmingManager.lemmingsAreSafe()) {			clearInterval(correctAnswerDelay);			projectileManager.halt();			oracle.clearSpeechBubble();			nextQuestion(true);		}	}		public function incorrectAnswer(attempt:Object):Void {		trace("show ANGRY, please");		oracle.showAngry();	}	public function winGame():Void {		LZGame.getStage().gotoAndStop("win");		projectileManager.halt();		screenManager.destroy();		badGuy.destroy();		oracle.destroy();	}	public function loseGame():Void {		LZGame.getStage().gotoAndStop("lose");		projectileManager.halt();		screenManager.destroy();		badGuy.destroy();		oracle.destroy();	}	public function getScore():String {		return String(lemmingManager.getLemmingsLeft());	}}