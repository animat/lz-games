import mx.utils.Delegate;import mx.transitions.Tween;import flash.geom.Point;//class BowAndArrow {	private var arrow:MovieClip;	private var bow:MovieClip;	private var bowPull:MovieClip;	private var elasticComplete:MovieClip;	private var elasticLeft:MovieClip;	private var elasticRight:MovieClip;	private var velocity:Object;	private var aiming:Boolean;	private var fired:Boolean;	private var bounced:Boolean;	private var arrowPoint:Point;	private var bowPullPoint:Point;	private var renew:Boolean;		public function BowAndArrow() {		fired = false;		bounced = false;		renew = true;		arrowPoint = new Point(300, 255);		bowPullPoint = new Point(310, 255);				bow = LZGame.getStage().attachMovie("bow", "bow", LZGame.getStage().getNextHighestDepth(), {_x: 242, _y: 225});		bowPull = LZGame.getStage().attachMovie("bowPull", "bowPull", LZGame.getStage().getNextHighestDepth(), 					{_x: bowPullPoint.x, _y: bowPullPoint.y});				arrow = LZGame.getStage().attachMovie("arrow", "arrow", LZGame.getStage().getNextHighestDepth(), 					{_x: arrowPoint.x, _y: arrowPoint.y});		arrow._visible = false;				elasticLeft = LZGame.getStage().createEmptyMovieClip("elasticLeft", LZGame.getStage().getNextHighestDepth());		elasticRight = LZGame.getStage().createEmptyMovieClip("elasticRight", LZGame.getStage().getNextHighestDepth());		elasticLeft.onEnterFrame = Delegate.create(this, drawElasticLines);				bowPull.onPress = Delegate.create(this, beginAiming);		bowPull.onRelease = Delegate.create(this, releaseArrow);		bowPull.onReleaseOutside = Delegate.create(this, releaseArrow);				velocity = {x: 0, y: 0};	}		private function fly():Void {		arrow._x += velocity.x;		arrow._y += velocity.y;				var ySpeed:Number = velocity.y + arrow.gravityForce.gravitySpeed;		var theta:Number = Math.atan2(ySpeed, velocity.x);		var rot:Number = (theta / Math.PI) * 180 + 90;		arrow._rotation = rot;				if (arrow._y > 450) {			resetArrow();		}		if (arrow._x < 1) {			arrow._x = 1;			bounce();		} else if(arrow._x > 599) {			arrow._x = 599;			bounce();		}	}		public function bounce():Void {		velocity.x *= -0.6;		arrow.gravityForce.gravitySpeed = -5 - velocity.y;	}		private function beginAiming():Void {		if (!fired) {			aiming = true;		} else {			resetArrow();			aiming = true;		}	}	private function drawElasticLines():Void {		if (!fired) {					}		if (aiming) {			bowPull._x = LZGame.getStage()._xmouse;			bowPull._y = LZGame.getStage()._ymouse;			arrow._x = LZGame.getStage()._xmouse;			arrow._y = LZGame.getStage()._ymouse;		}				elasticLeft.clear();		elasticLeft.lineStyle(5, 0xFFFFFF, 100);		elasticLeft.moveTo(bow._x + 11, bow._y + 15);		elasticLeft.lineTo(bowPull._x - bowPull._width / 2, bowPull._y);				elasticRight.clear();		elasticRight.lineStyle(5, 0xFFFFFF, 100);		elasticRight.moveTo(bow._x + bow._width - 13, bow._y + 12);		elasticRight.lineTo(bowPull._x + bowPull._width / 2, bowPull._y);	}		private function releaseArrow():Void {		LZGame.getInstance().score.increaseTotal();		new Tween(bowPull, "_x", mx.transitions.easing.Elastic.easeOut, bowPull._x, bowPullPoint.x, 1, true);		new Tween(bowPull, "_y", mx.transitions.easing.Elastic.easeOut, bowPull._y, bowPullPoint.y, 1, true);		fired = true;		aiming = false;		arrow._visible = true;		velocity.x = (arrowPoint.x - RunGame.getStage()._xmouse) / 5;		velocity.y = (arrowPoint.y - RunGame.getStage()._ymouse) / 5;		arrow.onEnterFrame = Delegate.create(this, fly);		Gravity.gravitize(arrow);	}		private function resetArrow():Void {		if (renew) {			fired = false;			bounced = false;			arrow._visible = false;			arrow._x = arrowPoint.x;			arrow._y = arrowPoint.y;			arrow._rotation = 0;			delete arrow.onEnterFrame;			Gravity.ungravitize(arrow);		} else {			destroy();		}	}		public function destroy():Void {		delete arrow.onEnterFrame;		removeMovieClip(elasticLeft);		removeMovieClip(elasticRight);		removeMovieClip(bow);		removeMovieClip(arrow);		removeMovieClip(bowPull);	}		public function destroyBow():Void {		removeMovieClip(bow);		removeMovieClip(bowPull);	}		public function setRenew(val:Boolean):Void {		renew = val;	}	public function hasBounced():Boolean {		return bounced;	}	public function setBounced(val:Boolean):Void {		bounced = val;	}	public function isFired():Boolean {		return fired;	}	public function getArrowClip():MovieClip {		return arrow;	}}