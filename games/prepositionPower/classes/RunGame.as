import mx.utils.Delegate;import mx.transitions.Tween;import flash.filters.DropShadowFilter;import flash.external.ExternalInterface;//class RunGame extends LZGame implements gametypes.MatchingGame {		private var qStimDisplay:StimulusDisplay;	private var qStimBeforeAndAfter:StimulusDisplay;	private var hesitateOnAfterText:Number;	private var woodBoxDisplay:MovieClip;	private var balloonManager:BalloonManager;	private var bowAndArrow:BowAndArrow;	public var score:Score;	private var balloonsInterval:Number;		public function RunGame(main:MovieClip) {		super(main);		setInstance(this);				woodBoxDisplay = LZGame.getStage().attachMovie("woodBoxDisplay", "woodBoxDisplay", LZGame.getStage().getNextHighestDepth(), {_x: 130});		woodBoxDisplay.filters = new Array(new DropShadowFilter(4, 60, 0x333333, 60, 6, 6, 2, 2, false, false, false));				score = new Score();		bowAndArrow = new BowAndArrow();		balloonManager = new BalloonManager(questionList.getOptions(), bowAndArrow);		nextQuestion(false);	}		public function nextQuestion(proceed:Boolean):Void {		if (proceed == true || proceed == "true" || arguments.caller.proceed == true) {			questionList.increaseQNum();			if (questionList.getQuestionsLeft() == 0) {				winGame();			} else {				qStimDisplay.reset();				qStimBeforeAndAfter.reset();				balloonManager.resetBalloons();				new Tween(woodBoxDisplay, "_y", mx.transitions.easing.Bounce.easeOut, -120, 0, 2, true);			}		}		refreshQDisplay();	}		public function refreshQDisplay():Void {		qStimDisplay = new PQuestionDisplay(woodBoxDisplay.promptDisplay, "qStimDisplay", questionList.getCurrentQ().getStimulus());		qStimDisplay.setPos(50, -15);				qStimBeforeAndAfter = new PQuestionDisplay(woodBoxDisplay.beforeAndAfter, "qStimBeforeAndAfter", new Stimulus(questionList.getCurrentQ().getAttributes().before, "text"));		qStimBeforeAndAfter.setPos(50, -15);				var resp:Response = questionList.getCurrentQ().getResponses()[0];		balloonManager.setCorrectBalloon(resp.getStimulus());	}		public function evaluate(attempt:Object):Void {		if (attempt.isCorrect()) {			attempt.popBalloon();			correctAnswer();			if (questionList.getQuestionsLeft() == 1) {				bowAndArrow.setRenew(false);			}		} else {			incorrectAnswer();		}	}		private function hideBeforeText():Void {		var twn:Tween = new Tween(woodBoxDisplay.beforeAndAfter, "_y", mx.transitions.easing.Regular.easeIn, woodBoxDisplay.beforeAndAfter._y, woodBoxDisplay.beforeAndAfter._y - 60, 1, true);		twn.onMotionFinished = Delegate.create(this, revealAfterText);	}	private function revealAfterText():Void {		qStimBeforeAndAfter.reset();		qStimBeforeAndAfter = new PQuestionDisplay(woodBoxDisplay.beforeAndAfter, "qStimBeforeAndAfter", new Stimulus(questionList.getCurrentQ().getAttributes().after, "text"));		qStimBeforeAndAfter.setPos(50, -15);		var twn:Tween = new Tween(woodBoxDisplay.beforeAndAfter, "_y", mx.transitions.easing.Regular.easeOut, woodBoxDisplay.beforeAndAfter._y, woodBoxDisplay.beforeAndAfter._y + 60, 1, true);		hesitateOnAfterText = setInterval(this, "hideQuestionDisplay", 2000);	}	private function hideQuestionDisplay():Void {		clearInterval(hesitateOnAfterText);		var twn:Tween = new Tween(woodBoxDisplay, "_y", mx.transitions.easing.Bounce.easeIn, 0, -120, 2, true);		var myDel = twn.onMotionFinished = Delegate.create(this, nextQuestion);		myDel.proceed = true;	}		public function correctAnswer():Void {		score.increaseCorrect();		balloonManager.flyAwayBalloons();		if (questionList.getCurrentQ().getAttributes().before != questionList.getCurrentQ().getAttributes().after) {			hideBeforeText();		} else {			hideQuestionDisplay();		}	}		public function incorrectAnswer():Void {		bowAndArrow.bounce();		bowAndArrow.setBounced(true);	}		public function winGame():Void {		bowAndArrow.destroyBow();		removeMovieClip(woodBoxDisplay);		LZGame.getStage().gotoAndPlay("win");	}	public function getScore():String {		return score.getCorrect()+"/"+score.getTotal();	}		public function pauseGame():Void {		balloonManager.pauseBalloons();	}	public function resumeGame():Void {		balloonManager.resumeBalloons();	}	public function runGiveUp():Void {		correctAnswer();		// penalty	}}