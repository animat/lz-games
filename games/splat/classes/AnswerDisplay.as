class AnswerDisplay {	private var classScope:Object;	private var currentQuestion:Question;	private var currentQuestionLang:String;	private var lettersLeft:Number;	private var qNum:Number;			private var textFormatting:TextFormat;	private var letterWidth:Number;	private var holderClip:MovieClip;	//	public function AnswerDisplay(classScope:Object, currentQuestion:Question) {		this.classScope = classScope;		this.currentQuestion = currentQuestion;		currentQuestionLang = currentQuestion.getResponses()[0].getStimulus().getContent();		lettersLeft = currentQuestionLang.length;				textFormatting = new TextFormat("Arial", 32, 0xFFFFFF, true);		letterWidth = 32;				holderClip = LZGame.getStage().createEmptyMovieClip("answerHolder", 150);		holderClip._x = 200;		holderClip._y = 20;				createLetterMCs();	}		private function createLetterMCs():Void {		var letterXPos:Number = 0;		var letterYPos:Number = 0;				// If the word is more than 12 letters, shrink the font to make more room on the line		if (currentQuestionLang.length > 12) {			textFormatting = new TextFormat("Arial", 25, 0xFFFFFF, true);			letterWidth = 20;		}				for (var i:Number = 0; i < currentQuestionLang.length; i++) {			if (currentQuestionLang.charAt(i) == " ") {				//30 is the magic number for the underline, 35 for a new line				letterXPos = 0;				letterYPos += 35;				lettersLeft -= 1;			} else {				var newLetterMC:MovieClip = holderClip.createEmptyMovieClip("letter_"+i, i);										var txtfield:TextField = createTextfield(newLetterMC, currentQuestionLang.charAt(i));				var line:MovieClip = createUnderline(newLetterMC);								// Place and align letters and underlines				line._y = Math.ceil(txtfield._height) - 4;				line._width = letterWidth + 4;				txtfield._x = Math.ceil((line._width / 2) - (txtfield._width / 2));							letterXPos += newLetterMC._width + 2;				letterPosition(newLetterMC, letterXPos, i);				newLetterMC._x = letterXPos;				newLetterMC._y = letterYPos;			}		}		hideAllLetters();	}		private function createTextfield(letterClip:MovieClip, letter:String):TextField {		letterClip.createTextField("textfield", 10, 0, 0, 0, 0);		letterClip.textfield.autoSize = true;		letterClip.textfield.selectable = false;		letterClip.textfield.setNewTextFormat(textFormatting);		letterClip.textfield.text = letter;		return letterClip.textfield;	}		private function createUnderline(letterClip:MovieClip):MovieClip {		var line:MovieClip = letterClip.attachMovie("letterUnderline", "letterUnderline", 1);		return line;	}		private function letterPosition(newLetterMC:MovieClip, xPos:Number, num:Number):Void {		newLetterMC._x = xPos;		//newLetterMC.letterUnderline._width = newLetterMC._width;	}		public function hideAllLetters():Void {		for (var i:Number = 0; i < currentQuestionLang.length; i++) {			var letterMC:MovieClip = holderClip["letter_"+i];			letterMC.textfield._visible = false;		}	}		public function revealLetter(letterClip:MovieClip):Void {		letterClip.textfield._visible = true;	}		public function decreaseLettersLeft():Void {		lettersLeft--;	}	public function getLettersLeft():Number {		return lettersLeft;	}	//	public function wordIsFinished():Boolean {		if (lettersLeft == 0) {			classScope.main.engDisplay.text = "";			return true;		} else {			return false;		}	}	public function getClip():MovieClip {		return holderClip;	}}