import mx.utils.Delegate;import mx.transitions.Tween;//class Card {	//	private var manager:CardManager;	private var clip:MovieClip;	private var stim:Stimulus;	private var stimDisplay:StimulusDisplay;	private var hidden:Boolean;	private var flipping:Boolean;	private var active:Boolean;	private var showPause:Number;	//	public function Card(manager:CardManager, holder:MovieClip, index:Number, stim:Stimulus) {		this.manager = manager;		clip = holder.attachMovie("card", "card"+index, holder.getNextHighestDepth());		this.stim = stim;		stimDisplay = new CardDisplay(clip, "stim", stim);		stimDisplay.setPos(5, 25);		stimDisplay.setDim(60, 60);		stimDisplay.hide();		hidden = true;		flipping = false;		active = true;		clip.onRelease = Delegate.create(this, attemptAnswer);	}	public function attemptAnswer():Void {		if (!flipping) {			manager.attemptAnswer(this);		}	}	public function flip():Void {		if (hidden) {			clip.gotoAndPlay("reveal");			flipping = true;			showPause = setInterval(this, "setShowPause", 500);			hidden = false;		} else {			clip.gotoAndPlay("hide");			stimDisplay.hide();			hidden = true;		}	}	private function setShowPause():Void {		stimDisplay.show();		flipping = false;		clearInterval(showPause);	}	public function correctAnim(xx:Number, yy:Number):Void {		new Tween(clip, "_xscale", mx.transitions.easing.Regular.easeOut, clip._xscale, 30, 1, true);		new Tween(clip, "_yscale", mx.transitions.easing.Regular.easeOut, clip._yscale, 30, 1, true);		new Tween(clip, "_x", mx.transitions.easing.Bounce.easeOut, clip._x, xx, 2, true);		new Tween(clip, "_y", mx.transitions.easing.Bounce.easeOut, clip._y, yy, 2, true);	}	//	public function setPos(xx:Number, yy:Number):Void {		clip._x = xx;		clip._y = yy;	}	public function destroy():Void {		removeMovieClip(clip);		hidden = false;		active = false;	}	public function getClip():MovieClip {		return clip;	}	public function getStim():Stimulus {		return stim;	}	public function setActive(val:Boolean):Void {		active = val;		clip.enabled = val;	}	public function isActive():Boolean {		return active;	}	public function isHidden():Boolean {		return hidden;	}}