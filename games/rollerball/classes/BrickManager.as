import mx.utils.Delegate;class BrickManager {	private var bricks:Array;	private var currentBrick:Brick;	private var ballClip:MovieClip;			public function BrickManager(questions:Array) {		bricks = new Array();		currentBrick = null;				createBricks(questions);		//bricks = bricks.shuffle();		placeBricks();	}		private function createBricks(questions:Array):Void {		for (var i:Number = 0; bricks.length < 28; i++) {			if (i >= questions.length) {				i = 0;			}			bricks.push(new Brick(questions[i], bricks.length));		}	}	private function placeBricks():Void {		var xx:Number = 10;		var yy:Number = 10;		for (var i:Number = 0; i < bricks.length; i++) {			bricks[i].setPos(xx, yy);			xx += 150;			if (xx > 460) {				xx = 10;				yy += 100;			}		}	}		public function checkForBallCollisions():Void {		var tmp:MovieClip = bricks[0].getClip();		tmp.onEnterFrame = Delegate.create(this, highlightBallCollisions);	}		private function highlightBallCollisions():Void {		for (var i:Number = 0; i < bricks.length; i++) {			if (bricks[i].getClip().hitTest(ballClip)) {				bricks[i].setColliding(true);				currentBrick = bricks[i];			} else {				bricks[i].setColliding(false);			}		}	}		public function tagCurrentBrick():Void {		currentBrick.tag();	}	public function getCurrentBrick():Brick {		return currentBrick;	}		public function setBallClip(mc:MovieClip):Void {		ballClip = mc;	}}