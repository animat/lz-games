import mx.utils.Delegate;import flash.geom.Point;//class MoleManager {	//	private var moles:Array;	private var activeMoles:Array;	private var availableMoles:Array;	private var popUpDelay:Number;	private var maxMoles:Number;	//	public function MoleManager(ques:Array) {		activeMoles = new Array();		availableMoles = new Array();		moles = new Array();		//maxMoles = 10;		maxMoles = 1;		createMoles(ques);		popUpDelay = setInterval(this, "popUpMole", 750);	}		public function createMoles(ques:Array):Void {		if (ques.length < maxMoles) {			// double or triple the questions array to have at least the number of maxmoles?		}				var counter:Number = 0;		for (var i:Number = 0; i < ques.length; i++) {			var tmp:Mole = new Mole(ques[i], counter, this);			moles.push(tmp);			availableMoles.push(tmp);			counter++;		}	}		public function popUpMole():Void {		if (availableMoles.length > 0) {			var rndm:Number = Math.floor(Math.random() * availableMoles.length);			var nextMole:Mole = availableMoles[rndm];			if (nextMole != null && !nextMole.isShowing()) {				var searching:Boolean = true;				var counter:Number = 0;				while (searching && counter < 15) {					var newPt:Point = nextMole.calcNewPosition();					var overlapping:Boolean = false;					for (var i:Number = 0; i < activeMoles.length; i++) {						var compMole:Mole = activeMoles[i];						var lft:Number = compMole.getLeftSide();						var rght:Number = compMole.getRightSide();						var tp:Number = compMole.getTopSide();						var btm:Number = compMole.getBottomSide();						trace("Comparing... "+tp+", "+rght+", "+btm+", "+lft+" ::: "+newPt.x+", "+newPt.y);						if (newPt.x >= compMole.getLeftSide() && newPt.x <= compMole.getRightSide() &&								newPt.y >= compMole.getTopSide() && newPt.y <= compMole.getBottomSide()) {							overlapping = true;						}					}					if (!overlapping) {						nextMole.setNewPosition(newPt.x, newPt.y);						nextMole.popUp();						activeMoles.push(nextMole);						availableMoles.splice(rndm, 1);						return;					} else {						trace("MoleManager :: popUpMole :: Found an overlap. Searching again... "+counter);						counter++;					}				}			}		}	}	public function deactivateMole(m:Mole):Void {		for (var i:Number = 0; i < activeMoles.length; i++) {			if (activeMoles[i].equals(m)) {				activeMoles.splice(i, 1);				availableMoles.push(m);			}		}	}	public function destroy():Void {		clearInterval(popUpDelay);		for (var i:Number = 0; i < moles.length; i++) {			moles[i].destroy();		}		delete this;	}		public function hit(attempt:Object):Void {		LZGame.getInstance().evaluate(attempt);	}}