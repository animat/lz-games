import mx.transitions.Tween;import mx.utils.Delegate;import flash.filters.DropShadowFilter;import flash.filters.BevelFilter;import flash.geom.ColorTransform;import flash.geom.Transform;import flash.geom.Point;//class Mole {	//	private var colorTrans:ColorTransform;	private var manager:MoleManager;	private var question:Question;	private var clip:MovieClip;	private var stim:MoleStimDisplay;	private var stimType:String;	private var masker:MovieClip;	private var trans:Transform;	private var shadowLeft:MovieClip;	private var shadowCenter:MovieClip;	private var shadowRight:MovieClip;	private var showing:Boolean;	private var hideDelay:Number;	private var busy:Boolean;	//	public function Mole(question:Question, index:Number, manager:MoleManager) {		colorTrans = new ColorTransform();		this.question = question;		this.manager = manager;		clip = LZGame.getStage().createEmptyMovieClip("mole_"+index, LZGame.getStage().getNextHighestDepth());		showing = false;		createShadow();		createStimDisplay(question, index);		clip._alpha = 0;		busy = false;		clip.onPress = Delegate.create(this, hit);	}		private function hit():Void {		if (!busy) {			manager.hit(this);			busy = true;				}	}	public function strikeDown():Void {		clearInterval(hideDelay);		hideDelay = setInterval(this, "dropDown", 300);	}	private function dropDown():Void {		clearInterval(hideDelay);		stim.clip._y += ((stim.getHeight() / 5) * 2);		hideDelay = setInterval(this, "hideText", 1000);	}	public function strikeBounce():Void {		clearInterval(hideDelay);		colorTrans.redOffset = 255;		colorTrans.greenOffset = 0;		colorTrans.blueOffset = 0;		var trans:Transform = new Transform(stim);		trans.colorTransform = colorTrans;		var twn:Tween = new Tween(stim.clip, "_y", mx.transitions.easing.Regular.easeOut, stim.clip._y, stim.clip._y - 40, .25, true);		twn.onMotionFinished = Delegate.create(this, jumpDown);	}	public function jumpDown():Void {		var twn:Tween = new Tween(stim.clip, "_y", mx.transitions.easing.Regular.easeIn, stim.clip._y, stim.clip._y + 40, .25, true);				twn.onMotionFinished = Delegate.create(this, hideText);	}		private function createStimDisplay(q:Question, index:Number):Void {		stim = new MoleStimDisplay(clip, "stim", q.getResponses()[0].getStimulus(), this);		masker = LZGame.getStage().attachMovie("masker", "masker_"+index, LZGame.getStage().getNextHighestDepth());		masker._x = clip._x;		masker._y = clip._y;		stimType = q.getResponses()[0].getStimulus().getType();		if (stimType == "TEXT") {			setMasker();		}	}		public function setMasker():Void {		if (stimType == "TEXT") {			clip.stim.setMask(masker);		} else {			clip.stim.setMask(masker);		}	}		private function createShadow():Void {		shadowLeft = clip.attachMovie("shadow_left", "shadow_left", clip.getNextHighestDepth());		shadowLeft._x = 0 - shadowLeft._width;		shadowCenter = clip.attachMovie("shadow_center", "shadow_center", clip.getNextHighestDepth());		shadowCenter._width = stim.getWidth();		shadowRight = clip.attachMovie("shadow_right", "shadow_right", clip.getNextHighestDepth());		shadowRight._x = shadowCenter._width;		shadowRight.onEnterFrame = Delegate.create(this, attachRight);	}	private function attachRight():Void {		shadowCenter._width = stim.getWidth();		shadowRight._x = shadowCenter._width;	}		public function popUp():Void {		showing = true;		clip._alpha = 100;		stim.clip._y = 5;		var twn:Tween = new Tween(clip, "_width", mx.transitions.easing.Elastic.easeOut, 20, stim.getWidth(), .5, true);		twn.onMotionFinished = Delegate.create(this, showText);	}	public function showText():Void {		clearInterval(hideDelay);		if (stimType == "TEXT") {			new Tween(stim.clip, "_y", mx.transitions.easing.Elastic.easeOut, 5, -stim.getHeight() * (2/3) - 2, .75, true);		} else {			new Tween(stim.clip, "_y", mx.transitions.easing.Elastic.easeOut, 5, -stim.getHeight(), 1, true);		}		hideDelay = setInterval(this, "hideText", 1700);		busy = false;	}		public function hideText():Void {		busy = true;		clearInterval(hideDelay);		var twn:Tween = new Tween(stim.clip, "_y", mx.transitions.easing.Regular.easeIn, stim.clip._y, 5, .35, true);		twn.onMotionFinished = Delegate.create(this, popDown);	}	public function popDown():Void {		var twn:Tween = new Tween(clip, "_width", mx.transitions.easing.Elastic.easeIn, stim.getWidth(), 20, .5, true);		new Tween(clip, "_alpha", mx.transitions.easing.Regular.easeOut, 100, 0, 1.5, true);		twn.onMotionFinished = Delegate.create(this, stopShowing);	}	public function stopShowing():Void {		manager.deactivateMole(this);		showing = false;		var trans:Transform = new Transform(clip.txt);		trans.colorTransform = new ColorTransform();		colorTrans.redOffset = 0;		colorTrans.greenOffset = 0;		colorTrans.blueOffset = 0;	}		public function destroy():Void {		delete clip.onPress;		delete shadowRight.onEnterFrame;		clip.txt.setMask(null);		removeMovieClip(clip);		removeMovieClip(masker);		delete this;	}	public function calcNewPosition():Point {		var xx:Number = Math.random() * (600 - clip._width);		var yy:Number = 100 + Math.random() * (300 - clip._height);		return new Point(xx,yy);	}	public function setNewPosition(xx:Number, yy:Number):Void {		clip._x = xx;		clip._y = yy;		applyMoleSize(yy);		applyMask();	}	private function applyMoleSize(yy:Number):Void {		var scale:Number = Math.round(10 + (10 * (yy / 150)));		if (stimType == "TEXT") {			stim.setTextSize(scale);		} else {			var num:Number = 50 + (scale * 3);			stim.setDim(num, num);		}		if (clip._x + clip._width > 600) {			clip._x = 600 - clip._width;		}	}	private function applyMask():Void {		masker._width = stim.getWidth();		masker._height = stim.getHeight() * 2.5;		masker._x = clip._x;		masker._y = (clip._y + clip.shadow_center._y + ((clip.shadow_center._height / 5) * 2)) - (masker._height);	}	public function getOption():Response {		return question.getResponses()[0];	}		public function getLeftSide():Number {		return clip._x;	}	public function getRightSide():Number {		return clip._x + clip._width;	}	public function getTopSide():Number {		return clip._y;	}	public function getBottomSide():Number {		return clip._y + clip._height;	}	public function isShowing():Boolean {		return showing;	}}