import mx.utils.Delegate;import mx.transitions.Tween;//class FoodItem {	//	private var manager:FoodItemManager;	private var holder:MovieClip;	private var stim:Stimulus;	private var clip:MovieClip;	private var clickMe:MovieClip;	private var loaded:Boolean;	private var startX:Number;	private var startXScale:Number;	private var startY:Number;	private var startYScale:Number;	private var targetX:Number;	private var targetY:Number;	//	public function FoodItem(manager:FoodItemManager, holder:MovieClip, id:String, stim:Stimulus) {		this.manager = manager;		this.holder = holder;		this.stim = stim;		loaded = false;		clip = holder.createEmptyMovieClip(id, holder.getNextHighestDepth());		clickMe = holder.attachMovie("foodItemClick", "foodItemClick", holder.getNextHighestDepth());		clickMe.onRelease = Delegate.create(this, selectFoodItem);		loadImage();	}	private function loadImage():Void {		var loaderListener:Object = new Object();		loaderListener.onLoadInit = Delegate.create(this, revealAndResize);		var loader:MovieClipLoader = new MovieClipLoader();		loader.addListener(loaderListener);		loader.loadClip("http://linguazone.s3.amazonaws.com/"+stim.getContent(), clip);	}	private function revealAndResize():Void {		loaded = true;		if (clip._width > clip._height) {			clip._width = 60;			clip._yscale = clip._xscale;		} else {			clip._height = 60;			clip._xscale = clip._yscale;		}		setPos(startX, startY - clip._height);		clickMe._x = startX;		clickMe._y = startY - clip._height;		startXScale = clip._xscale;		startYScale = clip._yscale;	}	public function selectFoodItem():Void {		manager.selectFoodItem(this);	}	public function correctAnim(xx:Number, yy:Number):Void {		clip.enabled = false;		targetX = xx;		targetY = yy;		var tweenX:Tween = new Tween(clip, "_x", mx.transitions.easing.Elastic.easeOut, clip._x, targetX, 1, true);		var tweenY:Tween = new Tween(clip, "_y", mx.transitions.easing.Elastic.easeOut, clip._y, 80, 1, true);		var tweenXScale:Tween = new Tween(clip, "_xscale", mx.transitions.easing.Regular.easeOut, clip._xscale, clip._xscale / 2, 1, true);		var tweenYScale:Tween = new Tween(clip, "_yscale", mx.transitions.easing.Regular.easeOut, clip._yscale, clip._yscale / 2, 1, true);		tweenX.onMotionFinished = Delegate.create(this, dropInBasket);	}	public function dropInBasket():Void {		var tweenY:Tween = new Tween(clip, "_y", mx.transitions.easing.Bounce.easeOut, clip._y, targetY, 1.5, true);	}	public function incorrectAnim():Void {		if (Math.round((clip._y + clip._width)) == Math.round(startY)) {			clip._y -= 30;			var tweenY:Tween = new Tween(clip, "_y", mx.transitions.easing.Bounce.easeOut, clip._y, clip._y + 30, 1, true);		} else {			trace("You can't do that");		}	}	public function reset():Void {		clip._xscale = startXScale;		clip._yscale = startYScale;		new Tween(clip, "_x", mx.transitions.easing.Elastic.easeOut, clip._x, startX, 2, true);		new Tween(clip, "_y", mx.transitions.easing.Elastic.easeOut, clip._y, startY - clip._height, 2, true);		clip.enabled = true;	}	public function destroy():Void {		removeMovieClip(clip);		removeMovieClip(clickMe);	}	//	public function setPos(xx:Number, yy:Number):Void {		clip._x = xx;		clip._y = yy;	}	public function setStartPos(xx:Number, yy:Number):Void {		trace("setStartPos :: "+clip);		startX = xx;		startY = yy;		if (loaded) {			clip._x = xx;			clip._y = yy - clip._height;			clickMe._x = xx;			clickMe._y = yy - clip._height;		}	}	public function getClip():MovieClip {		return clip;	}	public function getStimulus():Stimulus {		return stim;	}	public function isLoaded():Boolean {		return loaded;	}	public function isEnabled():Boolean {		return clip.enabled;	}	public function setVisible(val:Boolean):Void {		clip._visible = val;	}}