import mx.utils.Delegate;class FoodItemManager {	//	private var holder:MovieClip;	private var classScope:RunGame;	private var totalFoodItems:Number;	private var foodItems:Array;	private var activeItemNames:Array;	private var itemCateg:String;	private var itemNameIndex:Number;	private var defaultPath:String;	private var decoyItems:XML;	private var totalItemsMax:Number;	private var rooturl:String = "http://www.linguazone.com/api/v1";	//	public function FoodItemManager(classScope:RunGame, questions:Array, maxItemCount:Number) {		this.classScope = classScope;		foodItems = new Array();		activeItemNames = new Array();		defaultPath = "media/image/";		totalItemsMax = 15;		holder = LZGame.getStage().createEmptyMovieClip("foodItemHolder", LZGame.getStage().getNextHighestDepth());		getItemCategory(questions[0].getResponses()[0]);		createItems(questions, maxItemCount);	}	private function getItemCategory(r:Response):Void {		var tmp:String = r.getStimulus().getContent();		var startIndex:Number = defaultPath.length;		var endIndex:Number = tmp.indexOf("/", startIndex);		itemCateg = tmp.substring(startIndex, endIndex);		itemNameIndex = startIndex + itemCateg.length + 1;	}	private function createItems(questions:Array, maxItemCount:Number):Void {		totalFoodItems = Math.min(maxItemCount, questions.length);		createRealItems(questions);		createDecoyItems(questions);	}	private function createRealItems(questions:Array):Void {		for (var i:Number = 0; i < totalFoodItems; i++) {			var resp:Array = questions[i].getResponses()[0];			var tmp:FoodItem = new FoodItem(this, holder, String(i), resp.getStimulus());			foodItems.push(tmp);			var fullPath:String = resp.getStimulus().getContent();			var itemName:String = fullPath.substring(itemNameIndex, fullPath.length - 4);			activeItemNames.push(itemName);		}	}	private function createDecoyItems(questions:Array):Void {		decoyItems = new XML();		decoyItems.ignoreWhite = true;		decoyItems.onLoad = Delegate.create(this, loadDecoyItems);		decoyItems.load(rooturl+"/medias/search.xml?cat="+itemCateg);	}	private function loadDecoyItems(nodes:Array):Void {		var nodes:Array = decoyItems.firstChild.childNodes;		for (var i:Number = 0; i < nodes.length; i++) {			var attrs:Object = nodes[i].attributes;			if (activeItemNames.length >= totalItemsMax) {				break;			}			if (!checkIfActive(nodes[i].attributes.name) && nodes[i].attributes.name != undefined) {				var attrs:Object = nodes[i].attributes;				var decoyStim:Stimulus = new Stimulus(attrs.path+attrs.name+".swf", "IMAGE");				var tmp:FoodItem = new FoodItem(this, holder, attrs.name, decoyStim);				foodItems.push(tmp);				activeItemNames.push(attrs.name);			}		}		holder.onEnterFrame = Delegate.create(this, waitForImagesLoad);	}	private function checkIfActive(newName:String):Boolean {		for (var i:Number = 0; i < activeItemNames.length; i++) {			if (newName == activeItemNames[i]) {				return true;			}		}		return false;	}	private function waitForImagesLoad():Void {		var ready:Boolean = true;		for (var i:Number = 0; i < foodItems.length; i++) {			if (!foodItems[i].isLoaded()) {				ready = false;			}		}		if (ready) {			delete holder.onEnterFrame;			placeItems();		}	}	private function placeItems():Void {		var xPos:Number = 20;		var yPos:Number = LZGame.getStage().shelves.shelfBottom_1._y;		var rows:Number = 1;		var randomOrder:Array = randomizeOrder(foodItems);		for (var i:Number = 0; i < randomOrder.length; i++) {			var tmp:FoodItem = randomOrder[i];			if (xPos > 375) {				rows++;				if (rows == 2) {					xPos = 100;					yPos = LZGame.getStage().shelves.shelfBottom_2._y;				} else if (rows == 3) {					xPos = 160;					yPos = LZGame.getStage().shelves.shelfBottom_3._y;				} else if (rows == 4) {					xPos = 160;					yPos = LZGame.getStage().shelves.shelfBottom_4._y;				}			}			tmp.setStartPos(xPos, yPos);			tmp.setVisible(true);			xPos += 65;		}		classScope.timer.beginCountDown();	}	private function randomizeOrder(orig:Array):Array {		var origCopy:Array = new Array();		for (var i:Number = 0; i < orig.length; i++) {			origCopy[i] = orig[i];		}		var rndmOrder:Array = new Array();		while(origCopy.length > 0) {			var rndm:Number = Math.round(Math.random() * (origCopy.length - 1));			rndmOrder.push(origCopy[rndm]);			origCopy.splice(rndm, 1);		}		return rndmOrder;	}	public function selectFoodItem(item:FoodItem):Void {		classScope.setCurrentAttempt(item);		classScope.evaluate();	}	public function correctFoodItemAnim(index:Number):Void {		bringToFrontOfFoodItems(foodItems[index]);		var xPos:Number = (index % 2 == 0) ? 95 : 125;		var yPos:Number = 330 - (25  * (index / 2));		foodItems[index].correctAnim(xPos, yPos);	}	public function resetFoodItems():Void {		for (var i:Number = 0; i < foodItems.length; i++) {			if (!foodItems[i].isEnabled()) {				foodItems[i].reset();			}		}	}	public function destroyAllFoodItems():Void {		for (var i:Number = 0; i < foodItems.length; i++) {			foodItems[i].destroy();		}	}	//	public function getAllFoodItems():Array {		return foodItems;	}	public function bringToFrontOfFoodItems(item:FoodItem):Void {		var highest:FoodItem = item;		for (var i:Number = 0; i < foodItems.length; i++) {			if (foodItems[i].getClip().getDepth() > highest.getClip().getDepth()) {				highest = foodItems[i];			}		}		if (highest != item) {			item.getClip().swapDepths(highest.getClip());		}	}}