import tools.CheckAnswer;class RunGame {	public var manager:DuckManager;	public var engArray:Array;	public var langArray:Array;	private var target:MovieClip;	private var cutOff:Number;		function RunGame(target:MovieClip) {		this.target = target;				manager = new DuckManager(target);		_global.accessManager = manager;				langArray = new Array(); // These two arrays might be overlapping a bit with the arrays in DuckManager.as		engArray = new Array();		_global.accessEngArray = engArray;		_global.cutOff = cutOff; // I'm sure I'm confusing myself here, and using too many _global's... but I'm afraid to change it since it works!				getXML("rubberDuckie.xml", target);	}		private function getXML(xml_file:String, target:MovieClip) {		var xml = new XML();		xml.load(xml_file);		xml.ignoreWhite = true;		xml.onLoad = function() {			// Local var of elements in the array - English and foreign language entries - that need to be accounted for			var totalNum:Number = this.firstChild.firstChild.childNodes.length;			// Local var init for a counter of how many foreign language words (i.e. ducks) we have			var duckCounter:Number = 0;						// Add up how many foreign language words are in the XML (also, how many ducks we will need)			for (var i = 0; i<totalNum; i++) {  				var node = this.firstChild.firstChild.childNodes[i].attributes;				if (node.part == "lang" || node.part == "decoy") {					duckCounter++;				}			}						// If there are more than 10 ducks, divide them into two rows			if (duckCounter > 10) {				_global.cutOff = int(duckCounter / 2);				_global.topRowNumber = _global.cutOff;				_global.bottomRowNumber = (duckCounter - _global.cutOff);			} else {				_global.cutOff = 10;				_global.topRowNumber = duckCounter;				_global.bottomRowNumber = 0;			}						// Store the direction of a given duck... 1 = right, -1 = left			var dir:Number = 1;			// Used to check through each duck that has been placed			var localCounter:Number = 0;						for (var i = 0; i < totalNum; i++) {				var node = this.firstChild.firstChild.childNodes[i].attributes;				if (node.part == "lang" || node.part == "decoy") {					localCounter++;					// Used for checking if this needs to be divided onto two rows or not					if ( localCounter > _global.cutOff ) {					    dir = -1;				    }					_global.accessManager.addDuck(node.value, node.engEquiv, dir);				} else {					_global.accessManager.addWord(node.value)				}			}						// Create an answer checking object to be used on duckie release (in Engine class)			_global.accessCheckAnswer = new CheckAnswer();		};	}}