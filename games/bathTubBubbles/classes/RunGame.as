import mx.utils.Delegate;//class RunGame extends LZGame implements gametypes.MatchingGame {	public var score:Score;	public var bubbleManager:BubbleManager;	public var boy:Boy;	public var brush:Brush;	private var splashFX:MovieClip;	private var popFX:MovieClip;	//	public function RunGame(main:MovieClip) {		super(main);		main.totalPoints = 0;		//		score = new Score(questionList.getOptions().length);		bubbleManager = new BubbleManager(this, questionList.getOptions());		boy = new Boy();		brush = new Brush(this);		//		splashFX = main.attachMovie("_splash.mp3", "splashFX", main.getNextHighestDepth());		popFX = main.attachMovie("_pop.mp3", "popFX", main.getNextHighestDepth());		//		nextQuestion(false);	}	public function nextQuestion(proceed:Boolean):Void {		if (proceed == "true" || proceed == true) {			questionList.increaseQNum();		}		if (questionList.getIsValid(questionList.getQNum())) {			refreshQDisplay();		} else {			winGame();		}	}	public function refreshQDisplay():Void {		boy.resetStimulusDisplay();		boy.setStimulusDisplay(questionList.getCurrentQ().getStimulus());		boy.resetAnim();		bubbleManager.refreshBubbles();		setBusy(false);	}	public function evaluate(attempt:Object):Void {		setBusy(true);		if (questionList.getCurrentQ().evaluate(new ClickedOptionInput(attempt))) {			if (attempt.getOption().getStimulus().getType() == Stimulus.TEXT) {				var currentStr:String = boy.getStimulusDisplay().getStimulusContent();				var newStr:String = attempt.getOption().getStimulus().getContent();				boy.getStimulusDisplay().setText(newStr+" "+currentStr);			}			correctAnswer();		} else {			incorrectAnswer();		}	}	public function correctAnswer():Void {		bubbleManager.popAllRemainingBubbles();		boy.correctFrame();	}	public function playPopFX():Void {		popFX.gotoAndPlay(2);	}	public function tossBoat():Void {		boy.correctAnim();		TimelineManager.registerClip(main.boy, this, nextQuestion, [true], "correct_done");		splashFX.start();	}	public function incorrectAnswer():Void {		boy.wrongAnim();		TimelineManager.registerClip(main.boy, this, resetBoy, [], "wrong_done");		score.decrementPointsAvailable();	}	public function winGame():Void {		main.gotoAndPlay("win");		bubbleManager.destroyBubbles();	}	public function getScore():String {		return String(score.getCurrentScore());	}	//	public function setBusy(val:Boolean):Void {		__busy = val;		if (val == "true" || val == true) {			bubbleManager.deactivateBubbles();		} else {			bubbleManager.activateBubbles();		}	}	private function resetBoy():Void {		boy.resetAnim();		setBusy(false);	}		//	public function runMoveToEnd ():Void {		movetoend ();		refreshQDisplay ();	}	public function pauseGame():Void {		bubbleManager.pauseBubbles();	}	public function resumeGame():Void {		bubbleManager.resumeBubbles();	}}