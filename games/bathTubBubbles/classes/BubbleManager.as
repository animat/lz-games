class BubbleManager {	//	private var bubbles:Array;	private var options:Array;	private var holder:MovieClip;	private var popAllRemainingBubblesInterval:Number;	private var classScope:RunGame;	//	public function BubbleManager(classScope:RunGame, options:Array) {		this.classScope = classScope;		this.options = options;		holder = LZGame.getStage().createEmptyMovieClip("bubbleHolder", LZGame.getStage().getNextHighestDepth());		bubbles = new Array();		createBubbles();	}	private function createBubbles():Void {		for (var i:Number = 0; i < options.length; i++) {			bubbles.push(new Bubble(this, holder, i, options[i]));		}	}	//	public function evaluate(attempt:Bubble):Void {		classScope.evaluate(attempt);	}	public function playPopFX():Void {		classScope.playPopFX();	}	//	public function popAllRemainingBubbles():Void {		popAllRemainingBubblesInterval = setInterval(this, "popNextBubbleAndWait", 300);	}	private function popNextBubbleAndWait(remainingBubbles:Array):Void {		var bubblesRemain:Boolean = false;		var poppedOne:Boolean = false;		for (var i:Number = 0; i < bubbles.length && !poppedOne; i++) {			if (!bubbles[i].isPopped()) {				bubbles[i].popBubble();				classScope.score.increaseBubbleBG();				poppedOne = true;				bubblesRemain = true;			}		}		if (!bubblesRemain) {			classScope.tossBoat();			classScope.score.bounceBubbleBG();			clearInterval(popAllRemainingBubblesInterval);		}	}	public function refreshBubbles():Void {		for (var i:Number = 0; i < bubbles.length; i++) {			bubbles[i].resetBubble();		}	}	public function activateBubbles():Void {		for (var i:Number = 0; i < bubbles.length; i++) {			bubbles[i].activateBubble();		}	}	public function deactivateBubbles():Void {		for (var i:Number = 0; i < bubbles.length; i++) {			bubbles[i].deactivateBubble();		}	}	public function destroyBubbles():Void {		for (var i:Number = 0; i < bubbles.length; i++) {			bubbles[i].destroyBubble();		}	}		public function pauseBubbles():Void {		for (var i:Number = 0; i < bubbles.length; i++) {			bubbles[i].pauseBubble();		}	}	public function resumeBubbles():Void {		for (var i:Number = 0; i < bubbles.length; i++) {			bubbles[i].resumeBubble();		}	}	//	public function getHolder():MovieClip {		return holder;	}	public function getBubbles():Array {		return bubbles;	}}