class TreeManager {	private var classScope:RunGame;	private var options:Array;	private var leftTrees:Array;	private var rightTrees:Array;	private var minLeftY:Number;	private var minRightY:Number;	private var maxY:Number;	public function TreeManager(classScope:RunGame, options:Array) {		this.classScope = classScope;		this.options = options;		leftTrees = new Array();		rightTrees = new Array();		minLeftY = 130;		minRightY = 210;		maxY = 385;		createTrees();		defaultCommitToTreeBranch("left");	}	private function createTrees():Void {		for (var i:Number = 0; i < options.length; i++) {			var side:String = options[i].getOptionGroup();			if (side == "ltarget") {				leftTrees.push(new TreeBranch(this, LZGame.getStage(), options[i], i));			} else if (side == "rtarget") {				rightTrees.push(new TreeBranch(this, LZGame.getStage(), options[i], i));			}		}		placeTrees();	}	private function placeTrees():Void {		var leftSpacing:Number = getAverageLeftYSpacing();		for (var i:Number = 0; i < leftTrees.length; i++) {			leftTrees[i].setClipPos(15, getMinLeftY() + (leftSpacing * i));		}		var rightSpacing:Number = getAverageRightYSpacing();		for (var j:Number = 0; j < rightTrees.length; j++) {			rightTrees[j].setClipPos(490, getMinRightY() + (rightSpacing * j));			rightTrees[j].reverseClip();		}	}	public function commitToTreeBranch(branch:TreeBranch):Void {		classScope.bird.commitToTreeBranch(branch, true);	}	public function defaultCommitToTreeBranch(dir:String):Void {		if (dir == "left") {			var rndm:Number = Math.floor(Math.random() * leftTrees.length);			classScope.bird.commitToTreeBranch(leftTrees[rndm], false);		} else {			var rndm:Number = Math.floor(Math.random() * rightTrees.length)			classScope.bird.commitToTreeBranch(rightTrees[rndm], false);		}	}	public function highlightTrees(dir:String):Void {		if (dir == "left") {			for (var i:Number = 0; i < leftTrees.length; i++) {				leftTrees[i].startFlashing();			}			for (i = 0; i < rightTrees.length; i++) {				rightTrees[i].stopFlashing();			}		} else if (dir == "right") {			for (var i:Number = 0; i < leftTrees.length; i++) {				leftTrees[i].stopFlashing();			}			for (i = 0; i < rightTrees.length; i++) {				rightTrees[i].startFlashing();			}		} else if (dir == "stop") {			for (var i:Number = 0; i < leftTrees.length; i++) {				leftTrees[i].stopFlashing();			}			for (i = 0; i < rightTrees.length; i++) {				rightTrees[i].stopFlashing();			}		}	}	public function destroyAllTrees():Void {		highlightTrees("stop");		for (var i in leftTrees) {			leftTrees[i].destroyClip();		}		for (i in rightTrees) {			rightTrees[i].destroyClip();		}	}	//	private function getAverageLeftYSpacing():Number {		return (getMaxY() - getMinLeftY()) / leftTrees.length;	}	private function getAverageRightYSpacing():Number {		return (getMaxY() - getMinRightY()) / rightTrees.length;	}	public function getMinLeftY():Number {		return minLeftY;	}	public function getMinRightY():Number {		return minRightY;	}	public function getMaxY():Number {		return maxY;	}}