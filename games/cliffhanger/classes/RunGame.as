import mx.utils.Delegate;import mx.transitions.Tween;import flash.external.ExternalInterface;//class RunGame extends LZGame implements gametypes.MatchingGame{	//	private var winFX:MovieClip;	private var correctFX:MovieClip;	public var bird:Bird;	private var progressDelay:Number;	public var treeManager:TreeManager;	public var stoneManager:StoneManager;	public var score:Score;	public var wordDisplay:StimulusDisplay;	private var currentQuestionBG:MovieClip;	private var fallFX:MovieClip;	//	public function RunGame(main:MovieClip) {		super(main);		//		treeManager = new TreeManager(this, questionList.getOptions());		stoneManager = new StoneManager(this);		score = new Score();		createLandscape();		//		// ***TODO: Select a better falling sound effect		// ***TODO: Create a better feathers flying animation		fallFX = main.attachMovie("_fall.mp3", "fallFX", main.getNextHighestDepth());		correctFX = main.attachMovie("_correct.mp3", "_correctFX.mp3", main.getNextHighestDepth());		winFX = main.attachMovie("_win.mp3", "_winFX.mp3", main.getNextHighestDepth());		//		nextQuestion(false);	}	private function createLandscape():Void {		currentQuestionBG = LZGame.getStage().attachMovie("currentQuestionBG", "currentQuestionBG", LZGame.getStage().getNextHighestDepth(), {_x: 160, _y: 10});	}	public function nextQuestion(proceed:Boolean):Void {		if (proceed == "true" || proceed == true) {			questionList.increaseQNum();			if (!questionList.getIsValid(questionList.getQNum())) {				winGame();				return;			}		}		refreshQDisplay();	}	public function refreshQDisplay():Void {		clearInterval(progressDelay);		updateQuestionPointValue();		var twnY:Tween = new Tween(currentQuestionBG, "_y", mx.transitions.easing.Regular.easeIn, currentQuestionBG._y, currentQuestionBG._y - 150, .5, true);		twnY.onMotionFinished = Delegate.create(this, updateQDisplay);	}	private function updateQDisplay():Void {		new Tween(currentQuestionBG, "_y", mx.transitions.easing.Bounce.easeOut, currentQuestionBG._y, currentQuestionBG._y + 150, 1, true);		progressDelay = setInterval(this, "releaseBird", 1500);		treeManager.highlightTrees("left");		wordDisplay.reset();		wordDisplay = new StimulusDisplay(currentQuestionBG, "wordDisplay", questionList.getCurrentQ().getStimulus());		wordDisplay.setTextFormat(new TextFormat("Verdana", 18, 0x412514));		wordDisplay.setPos((currentQuestionBG._width / 2) - (wordDisplay.getWidth() / 2), 13);	}	private function releaseBird():Void {		clearInterval(progressDelay);		if (bird != undefined) {			bird.destroy();		}		bird = new Bird(this);	}	private function updateQuestionPointValue():Void {		var question:Question = questionList.getCurrentQ();		if (question.getAttributes().pts == undefined) {			question.setAttributes({pts: 10});		} else {			var points:Number = question.getAttributes().pts;			points -= 3;			if (points < 1) {				points = 1;			}			question.setAttributes({pts: points});		}	}	public function evaluate(attempt:Object):Void {		var userResponse:Response = new Response();		userResponse.setStimulusFull(attempt.getOption().getStimulus());		if (questionList.getCurrentQ().evaluate(userResponse)) {			correctAnswer();		} else {			attempt.dodgeBird();			incorrectAnswer();		}	}	public function correctAnswer():Void {		correctFX.gotoAndPlay(2);		if (bird.getDir() == "left") {			bird.changeDirection("right");			bird.resetSpeed();			treeManager.highlightTrees("right");		} else {			bird.goToNest();			stoneManager.createStone(questionList.getCurrentQ().getStimulus());			score.addPoints(questionList.getCurrentQ().getAttributes().pts);		}	}	public function incorrectAnswer():Void {		bird.fall();		fallFX.gotoAndPlay(2);		questionList.movetoend();		progressDelay = setInterval(this, "refreshQDisplay", 1000);	}	public function winGame():Void {		winFX.gotoAndPlay(2);		wordDisplay.reset();		treeManager.destroyAllTrees();		LZGame.getStage().currentQuestionBG.removeMovieClip();		LZGame.getStage().score = score.getScore();		score.destroy();		bird.destroy();		LZGame.getStage().gotoAndStop("win");	}	public function getScore():String {		return String(score.getScore());	}	//	public function runMoveToEnd ():Void {		movetoend();		bird.destroy();		refreshQDisplay();	}	public function pauseGame():Void {		bird.pause();	}	public function resumeGame():Void {		bird.resume();	}}