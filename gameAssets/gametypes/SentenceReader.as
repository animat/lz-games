/** * This class reads the XML for all SentenceGames (e.g. Sentence Swiper) * and turns the XML into Question objects in the QuestionList. */class gametypes.SentenceReader extends AbstractXMLReader implements XMLReaderInterface {		public function SentenceReader(parentScope:Object, fileName:String, initCallBack:Function) {		super(parentScope, fileName, initCallBack);	}		public function getXML():Void {		var node:Array = xml.firstChild.childNodes;		var attributeNames:Array = getAttributeNames(node);		var gameData:Array = getBranchByName("gamedata", node);		var templateData:Array = getBranchByName("templatedata", node);		language = getBranchByName("language", node).toString();		questionList = compileQuestionList(generateQuestions(gameData, attributeNames), generateUniversalOptions(templateData));		callBackFunction();	}		public function generateQuestions(nodes:Array, attributeNames:Array):Array {		var questionArray:Array = new Array();		for (var i:Number = 0; i < nodes.length; i++) {			var questionNode:XMLNode = nodes[i].childNodes[0];			var qstnAttributes:Object = questionNode.attributes;			var question:Question = new Question(qstnAttributes.content, qstnAttributes.type);						var respNode:XMLNode = nodes[i].childNodes[1];			var respAttributes:Object = respNode.attributes;			question.addResponse(respAttributes.content, respAttributes.type);						var sentenceNode:XMLNode = nodes[i].childNodes[2];			var phrases:Array = sentenceNode.childNodes;			var attrs:Object = {};			var sentence:Array = new Array();			for (var j:Number = 0; j < phrases.length; j++) {				var currentNode:XMLNode = phrases[j];				sentence[j] = currentNode.firstChild.nodeValue;			}			attrs.sentence = sentence;			question.setAttributes(attrs);			questionArray.push(question);		}		return questionArray;	}		public function generateUniversalOptions(inputArray:Array):Array {		var optionArray = new Array();		for (var i:Number = 0; i < inputArray.length; i++) {			for (var j:Number = 0; j < inputArray[i].childNodes.length; j++) {				var optionAttributes:Object = inputArray[i].childNodes[j].attributes;				var optn = new Option(optionAttributes.content, optionAttributes.type);				trace("optn :: "+inputArray[i][j]);				optionArray.push(optn);			}		}		return optionArray;	}	}