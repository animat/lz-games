import mx.utils.Delegate;import mx.transitions.Tween;class StimulusDisplay extends MovieClip {	private var stim:Stimulus;	private var clip:MovieClip;	private var hidden:Boolean;	private var nc:NetConnection;	private var ns:NetStream;	private var playing:Boolean;	private var txtField:TextField;	private var txtFmt:TextFormat;	private var maxWidth:Number;	private var maxHeight:Number;	private var origXScale:Number;	private var origYScale:Number;	private var loadingImage:Boolean;		public function StimulusDisplay(target:MovieClip, id:String, stim:Stimulus) {		this.stim = stim;		clip = target.createEmptyMovieClip(id, target.getNextHighestDepth());		hidden = false;		loadingImage = false;				if (stim.getType() == Stimulus.TEXT) {			createTextDisplay();					} else if (stim.getType() == Stimulus.AUDIO) {			createAudioDisplay();			ns.play("flv:amazons3/linguazone/audio/"+stim.getContent()+".flv");					} else if (stim.getType() == Stimulus.IMAGE) {			createImageDisplay();		}	}		private function createTextDisplay():Void {		txtField = clip.createTextField("txtField", 1, 0, 0, 5, 5);		txtField.text = stim.getContent();		setDefaultTextFormat();	}	private function createAudioDisplay():Void {		nc = new NetConnection();		if (_root.liveRTMP) {			nc.connect(_root.liveRTMP);		} else {			nc.connect("rtmp://ec2-75-101-224-115.compute-1.amazonaws.com/lz-recorder");		}		ns = new NetStream(nc);		ns.onStatus = Delegate.create(this, nsStatus);		clip.attachMovie("audio-speaker", "speaker", clip.getNextHighestDepth());		clip.speaker.stop();		clip.onRelease = Delegate.create(this, playAudio);	}	private function createImageDisplay():Void {		var imageLoader:MovieClipLoader = new MovieClipLoader();		var imageListener:Object = new Object();		imageListener.onLoadInit = Delegate.create(this, restrainDimensions);		imageLoader.addListener(imageListener);		imageLoader.loadClip("http://linguazone.s3.amazonaws.com/"+stim.getContent(), clip);		loadingImage = true;	}			/*			Text controls			*/	public function setTextFormat(fmt:TextFormat):Void {		txtField.setTextFormat(fmt);		txtFmt = fmt;	}	private function setDefaultTextFormat():Void {		txtFmt = new TextFormat("Arial", 14, 0x000000);		txtField.setTextFormat(txtFmt);		txtField.selectable = false;		txtField.autoSize = true;	}	public function setText(str:String):Void {		txtField.text = str;		txtField.setTextFormat(txtFmt);	}			/*			Audio controls			*/	private function nsStatus(infoObject:Object) {		trace("NetStream.onStatus called: ("+getTimer()+" ms)");		for (var prop in infoObject) {			trace("\t"+prop+":\t"+infoObject[prop]);		}		trace("");				if (infoObject.code == "NetStream.Play.Start") {			playAudioMC();		} else if (infoObject.code == "NetStream.Unpause.Notify") {			playAudioMC();		} else if (infoObject.code == "NetStream.Play.Stop") {			stopAudioMC();		} else if (infoObject.code == "NetStream.Pause.Notify") {			stopAudioMC();		}	}	public function playAudio():Void {		ns.seek(0);		ns.pause();		playing = true;	}	public function stopAudio():Void {		ns.seek(0);		ns.pause();		playing = false;	}	private function playAudioMC():Void {		clip.speaker.gotoAndPlay("playing");	}	private function stopAudioMC():Void {		clip.speaker.gotoAndStop("static");	}			/*			Image controls			*/	private function restrainDimensions():Void {		loadingImage = false;		if (clip._width > maxWidth || clip._height > maxHeight) {			if (clip._width > clip._height) {				clip._width = maxWidth;				clip._yscale = clip._xscale;			} else {				clip._height = maxHeight;				clip._xscale = clip._yscale;			}			origXScale = clip._xscale;			origYScale = clip._yscale;			clip.onRollOver = Delegate.create(this, magnify);			clip.onRollOut = Delegate.create(this, recover);			clip._visible = !hidden;		}	}	private function magnify():Void {		new Tween(clip, "_xscale", mx.transitions.easing.Regular.easeOut, clip._xscale, clip._xscale * 2, .5, true);		new Tween(clip, "_yscale", mx.transitions.easing.Regular.easeOut, clip._yscale, clip._yscale * 2, .5, true);	}	private function recover():Void {		new Tween(clip, "_xscale", mx.transitions.easing.Bounce.easeOut, clip._xscale, origXScale, 1, true);		new Tween(clip, "_yscale", mx.transitions.easing.Bounce.easeOut, clip._yscale, origYScale, 1, true);	}			/*			Shared functions		*/	public function reset():Void {		clip.removeMovieClip();		delete this;		ns.play(null);		ns.close();	}	public function setPos(xx:Number, yy:Number):Void {		clip._x = xx;		clip._y = yy;	}	public function setDim(wid:Number, hei:Number):Void {		maxWidth = wid;		maxHeight = hei;	}	public function hide():Void {		clip._visible = false;		hidden = true;	}	public function show():Void {		clip._visible = true;		hidden = false;	}	public function isPlaying():Boolean {		return playing;	}			/*			Stimulus accessors		*/	public function getStimulusType():String {		return stim.getType();	}	public function getStimulusContent():String {		return stim.getContent();	}	public function getStimulus():Stimulus {		return stim;	}	public function getWidth():Number {		return clip._width;	}	public function getHeight():Number {		return clip._height;	}	}