import mx.transitions.Tween;import mx.utils.Delegate;class utilities.LZInputText {		private var clip:MovieClip;	private var textField:TextField;	private var lastAttempt:String;	private var txtFmt:TextFormat;	private var correctTxtFmt:TextFormat;	private var feedback:MovieClip;	private var letters:Array;	private var correctLetters:Array;	private var ready:Boolean;	private var animationTimer:Number;		public function LZInputText(target:MovieClip, id:String, wid:Number, hei:Number) {		clip = target.createEmptyMovieClip(id, target.getNextHighestDepth());		clip.createTextField("tf", 0, 0, 0, wid, hei);		textField = clip.tf;		textField.type = "input";		textField.border = true;		//textField.embedFonts = true;		clip.tf.onSetFocus = Delegate.create(this, setReference);		txtFmt = new TextFormat("Arial", 16, 0x000000);		textField.setNewTextFormat(txtFmt);		correctTxtFmt = new TextFormat("Arial", 16, 0x007f00);		ready = true;		enable();	}	public function setReference():Void {		_global.activeLZInputText = this;	}		public function displayFeedback(expected:String):Void {		if (ready) {			lastAttempt = textField.text;			createLayoverFeedback(lastAttempt, expected);		}	}		private function createLayoverFeedback(attempted:String, expected:String):Void {		disable();		feedback = clip.createEmptyMovieClip("feedback", 1);		letters = new Array();		correctLetters = new Array();		var xx:Number = 0;				for (var i:Number = 0; i < attempted.length; i++) {			var tmp:MovieClip = feedback.createEmptyMovieClip("feedback", feedback.getNextHighestDepth());			tmp.createTextField("txt", 0, 0, 0, 0, 0);			tmp.txt.autoSize = true;			tmp.txt.embedFonts = true;			tmp.txt._highquality = 2;			if (attempted.charAt(i) != expected.charAt(i)) {				tmp.txt.text = attempted.charAt(i);				tmp.txt.setTextFormat(txtFmt);				tmp.correct = false;			} else {				tmp.txt.text = attempted.charAt(i);				tmp.txt.setTextFormat(correctTxtFmt);				tmp.correct = true;				correctLetters.push(tmp);			}			tmp._x = xx;			xx += tmp.txt.textWidth;			letters.push(tmp);		}		clearText();		animationTimer = setInterval(this, "animateFeedback", 1000);	}	private function animateFeedback():Void {		clearInterval(animationTimer);		var correct = true;		for (var i:Number = 0; i < letters.length; i++) {			if (!letters[i].correct) {				var wrongtwn:Tween = new Tween(letters[i], "_y", mx.transitions.easing.Regular.easeOut, letters[i]._y, letters[i]._y + 35, .5, true);				new Tween(letters[i], "_alpha", mx.transitions.easing.Regular.easeOut, 100, 0, .5, true);				correct = false;			} else {				var correcttwn:Tween = new Tween(letters[i], "_alpha", mx.transitions.easing.Regular.easeIn, 100, 0, 1.15, true);			}		}		if (correctLetters.length == 0) {			wrongtwn.onMotionFinished = Delegate.create(this, deleteFeedback);		} else {			correcttwn.onMotionFinished = Delegate.create(this, deleteFeedback);		}	}	private function deleteFeedback():Void {		removeMovieClip(feedback);		enable();	}		public function disable():Void {		if (textField.type != "dynamic") {			textField.type = "dynamic";		}		ready = false;	}	public function enable():Void {		if (animationTimer != undefined) clearInterval(animationTimer);		if (textField.type != "input") {			textField.type = "input";		}		ready = true;		Selection.setFocus(textField);	}		public function clearText():Void {		textField.text = "";	}		public function destroy():Void {		trace("Trying to destroy :: "+clip);		clip._visible = false;		trace("LZInputText :: Destroyed");	}			public function setPos(xx:Number, yy:Number):Void {		clip._x = xx;		clip._y = yy;	}	public function setTextFormat(fmt:TextFormat):Void {		textField.setNewTextFormat(fmt);		txtFmt = fmt;	}	public function setText(t:String):Void {		textField.text = t;	}	public function getTextField():TextField {		return textField;	}	public function isAnimating():Boolean {		return !ready;	}	public function getInput():String {		return lastAttempt;	}	public function hideBorder():Void {		textField.border = false;	}	}