class utilities.LZDynamicText {		public static function autoSizeFont(field:TextField, maxWidth:Number, minFont:Number) {		var neededWidth:Number = field.textWidth;		var currentFormat:TextFormat = field.getTextFormat();		var currentWidth:Number = field._width;		if (!maxWidth) {			maxWidth = field._width;		}		if (!minFont) {			minFont = 7;		}		trace("autoSizeFont() :: "+field+", "+maxWidth+", "+minFont);		trace("   current width is "+currentWidth+" ["+neededWidth+"]");		while (currentWidth > maxWidth && currentFormat.size > minFont) {			currentFormat = field.getTextFormat();			currentFormat.size--;			field.setTextFormat(currentFormat);			currentWidth = field._width;		}		if (currentWidth > maxWidth) {			trace("the text is still too big!");			var avgWidth:Number = currentWidth / currentFormat.size;			var firstLine:Number = Math.floor(maxWidth / avgWidth);			var remainder:Number = field.text.length - firstLine;			if (remainder < 5) {				firstLine = field.length - 5;			}			var firstLineText:String = field.text.substr(0, firstLine);			var secondLineText:String = field.text.substr(firstLine, field.text.length);			field.text = firstLineText + "-" + newline + secondLineText;		}	}	}