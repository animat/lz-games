import mx.utils.Delegate;class XMLReader {	public var itemData:Array;	private var xml:XML;		private var fileName:String;		private var callBackFunction:Function;	private var language:String;	private var questionList:QuestionList;	public function XMLReader(parentScope:Object, fileName:String, initCallBack:Function) {		xml = new XML();				this.fileName = fileName;				xmlInit(fileName);		itemData = new Array();		callBackFunction = Delegate.create(parentScope, initCallBack);	}	private function xmlInit(fileName):Void {		xml.ignoreWhite = true;		xml.onLoad = Delegate.create(this, getXML);		xml.load(fileName);	}	private function getXML():Void {		/*		var node:Array = xml.firstChild.childNodes;		var attributeNames:Array = getAttributeNames(node);		var gameData:Array = getBranchByName("gamedata", node);		var customData:Array = getUniversalOptions(node);		language = getBranchByName("language", node).toString();		questionList = generateQuestionList(generateQuestions(gameData, attributeNames), generateUniversalOptions(customData));		*/		trace("Old XMLReader is done");		callBackFunction();			}	/*	private function generateQuestions(gameData:Array, attributeNames:Array):Array {		var questionArray:Array = new Array();		for (var i:Number = 0; i < gameData.length; i++) {			//"string" here needed to be loaded in from xml file for different stimulus types			var qstn:Question = new Question(gameData[i].attributes[attributeNames[0]], "string");			for (var j:Number = 1; j < attributeNames.length; j++) {				qstn.addAnswer(new Answer(gameData[i].attributes[attributeNames[j]], "string"));			}			questionArray.push(qstn);		}		return questionArray;	}	private function generateUniversalOptions(inputArray:Array):Array {		var optionArray = new Array();		for (var i:Number = 0; i < inputArray.length; i++) {					var group:String = inputArray[i].attributes.linkedto;			// Samit introduced this 			var groupAttributes:Array = inputArray[i].attributes;			var attribs:Array = inputArray[i].firstChild.attributes;			for (var j:Number = 0; j < inputArray[i].childNodes.length; j++) {				//"string" here needed to be loaded in from xml file for different stimulus types				var optn = new Option(inputArray[i].childNodes[j].firstChild, "string", String(i));				optn.setOptionGroup(group);				// Samit introduced this 				optn.setAttributes(inputArray[i].childNodes[j].attributes);				// Samit introduced this 				optn.setGroupAttributes(groupAttributes);				optionArray.push(optn);			}		}		return optionArray;	}	private function generateQuestionList(inputArray:Array, optionsArray:Array):QuestionList {		var questionList:QuestionList = new QuestionList();		questionList.addQuestions(inputArray);		questionList.addOptions(optionsArray);		return questionList;	}	private function getBranchByName(branchName:String, node:Array):Array {		for (var i:Number = 0; i < node.length; i++) {			if (node[i].nodeName == branchName) {				return node[i].childNodes;			}		}		return null;	}	private function getUniversalOptions(node:Array):Array {		for (var i:Number = 0; i < node.length; i++) {			if (node[i].nodeName == "gamedata") {				if (node[i].firstChild.nodeName == "customdata") {					return node[i].childNodes;				}			}		}		return new Array();	}	private function getAttributeNames(node:Array):Array {		var attributeNames:Array = new Array();		var dataNodes:Array = getBranchByName("format", node);		for (var i:Number = 0; i < dataNodes.length; i++) {			attributeNames.push(dataNodes[i].attributes.name);		}		return attributeNames;	}	public function getQuestionList():QuestionList {		return questionList;	}	public function getOptionsBranch():Array {		return getUniversalOptions(xml.firstChild.childNodes);	}	public function getLanguage():String {		return language;	}	public function getPercentLoaded():Number {		return xml.getBytesLoaded() / xml.getBytesTotal();	}	public function seeChildren():Array {		var tmp:Array = new Array();		tmp.push(xml);		tmp.push(xml.childNodes);		tmp.push(xml.toString);		tmp.push(fileName);		return tmp;	}	*/}