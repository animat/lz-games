create a timeline manager class
when i want to know whats going on with a movie clip, i'll pass the movie clip and the function to be called when its done into the timeline manager
yah, how you manage that is up to you
timeline manager checks on a timer to see if the animation is complete
you could have seperate instances of the timeline class
a static class
whatever
cool
the EASIEST would be seperate instances
dunno if itd be the most efficient tho
itd be sweet to have just one static class, though
depends on what you want done
ut yah
but yah*
where would the mc's and functions be passed in from?
from wherever you want to register the movieClip
ok
TimelineManager.registerClip(myClip, myFunction, [args]);
that sounds really sweet
i like it a lot
then there wouldnt need to be any AS on the FLA timeline
werd
it could all be managed by the timeline manager
then you just add it to an array
and in the timer
you run through the array
it checks each item
right on
thats sweet
you should pass in like a typed object
rather than just an mc, function, etc?
well
idk
depends
nvm
not a typed object
pass in the
11:00 PM
args like i said
just make them an object
when you push it into the array
that way you can associate
mc to function
thats how i did it anywy
i made it static
so they could do it fromm anywhere
perfect


you have any tips on using your events/ broadcaster thing?
nope
its easy
it doesnt work like flashs
or flexs
its not object specific
its global
you can register and receive events from anywhere
awesome
ok, i'll go through and give it a look right now
thanks so much
werd
you can use it through inheritance
or composition
and it has an interface
to program to
damn
taking a look right now...
ok, i see the IBroadcastable
Broadcaster.as is looking sort of intense
you dont really have to do anything
but call addeventlistener etc
alright
well i'll take some more time now to mess around with it
thanks for helpin me out man
i appreciate it

just make a new instance of broadcaster
then call the instance .addEventListener("myEvent", this, "myFunction");
then call the instance.dispatchEvent("myEvent");
awww thats great
then have function myFunction():void{trace("ran")}
then i can dispatch totally custom events
custom types
too
which you should really get in the habit of doing
so you can have a
UserInputEvent
new UserInputEvent(keyPressed:String);
pass that in as the data object
then when you get that object
data.getKeyPressed
ohh
then you can call the methods from that custom type, too...
yup
awesome