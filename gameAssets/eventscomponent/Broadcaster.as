class com.fonetag.events.Broadcaster {	private static var _instance:Broadcaster = null;	private function Broadcaster() {		eventArray = new Array();	}	private var eventArray:Array;	public static function getInstance():Broadcaster {		if (_instance == null) {			_instance = new Broadcaster();		}		return _instance;	}	public function addEventListener(eventType:String, scope:Object, handlerFunction:String):Void {		if (eventArray[eventType] == undefined) {			eventArray[eventType] = new Array();		}		eventArray[eventType].push({type:eventType, scope:scope, handlerFunction:handlerFunction});	}	public function dispatchEvent(eventType:String, dataObject:Object):Void {		//trace(eventType+" "+eventArray[eventType].length);		for (var i:Number = 0; i<eventArray[eventType].length; i++) {			var dataObject = dataObject;			dataObject.type = eventType;			var objRef:Object=eventArray[eventType][i];			objRef.scope[objRef.handlerFunction](dataObject);		}	}	public function removeEventListener(eventType:String, scope:Object, handlerFunction:String):Void {		for (var i:Number = 0; i<eventArray[eventType].length; i++) {			if (eventArray[eventType][i].type == eventType && eventArray[eventType][i].scope === scope && eventArray[eventType][i].handlerFunction === handlerFunction) {				eventArray[eventType].splice(i, 1);				break;			}		}	}	public function unlink(eventType:String):Void{		delete eventArray[eventType];	}}