import mx.events.EventDispatcher;import mx.utils.Delegate;import flash.external.ExternalInterface;/** * @className   LZContainer * @author  Samit Basak * @purpose Load the games through this container*/class LZContainer {	// _rootMc is the main movieClip reference	private var _rootMc:MovieClip;	// _gameID:  the id of the game to load and play	private var _gameID:String;	private var _gameName:String;	private var _gameDesc:String;	// _gameURL: the url of the game .swf file name	private var _gameURL:String;	// _listenerObj: the listner of the games events	private var _listenerObj:Object;	// _gameLoader:  loader of the game .swf	private var _gameLoader:MovieClipLoader;	// _gameMc: the game movieClip	private var _gameMc:MovieClip;	// pl : Preloader class of the game  	private var pl:Preloader;	// pauseControl:Pause controller	private var _pauseController:PauseControl;	// _fullscreen_btn: movie clip button that controls fullscreen toggle	private var _fullscreen_btn:MovieClip;	// _isFullscreen: the display state of the swf (true if in fullscreen mode)	private var _isFullscreen:Boolean;	private var _gameSWF:String;	private var _reportBug:ReportBug;	private var _submitScore:SubmitScore;	private var _gamePlayStarted:Boolean = false;	private var gameInfo:XML;	private var _availableHints:Array;	private var _toolbar:MovieClip;/**LZContainer Constructor @parammcMovieClipRefrence of the main movieClip@paramgameIDStringGame id*/	public function LZContainer (mc:MovieClip, gameID:String) {		_rootMc = mc.mc;		_toolbar = mc.toolbar;		//_toolbar._visible = false;		_gameID = gameID;		_isFullscreen = (_root.isFullscreen == undefined) ? false : _root.isFullscreen;		setFullscreenBtnText();		_availableHints  = new Array();				gameInfo = new XML();		gameInfo.ignoreWhite = true;		gameInfo.onLoad = Delegate.create(this, loadGameInfo);		gameInfo.load(_root.liveGameInfo);	}		private function loadGameInfo():Void {		var nodes:Array = gameInfo.firstChild.childNodes;		_gameName = gameInfo.firstChild.attributes.gameName;		_gameSWF = gameInfo.firstChild.attributes.gameSWF;		//_gameName = "Slingshot";		//_gameSWF = "slingshot";		_gameURL = _root.path + "games/" + _gameSWF + ".swf"; // Deployed		_gameDesc = gameInfo.firstChild.childNodes[0].firstChild;		_availableHints = new Array();				var hintxml:XML = gameInfo.firstChild.childNodes[1];		//var hintxml:XML = new XML("<hints><type>movetoend</type><type penalty='Provide+the+next+letter%3Cbr+%2F%3E%3Cfont+color%3D%27%23FF0000%27%3E%2B3%3C%2Ffont%3E+second+penalty '>nextletter</type><type penalty='I+give+up%21%3Cbr+%2F%3E%3Cfont+color%3D%27%23FF0000%27%3E%2B10%3C%2Ffont%3E+second+penalty '>giveup</type></hints>");		for (var i:Number = 0; i < hintxml.childNodes.length; i++) {			_availableHints.push({type:hintxml.childNodes[i].firstChild.toString(), text:unescape(hintxml.childNodes[i].attributes.penalty)});					}		loadGame();		initFullscreenButton();	}/**initFullscreenButton creates and initializes t/he fullscreen toggle button and its functionality@param none@return none*/	private function initFullscreenButton():Void {		_fullscreen_btn = _toolbar.fullscreenbtn;		//_fullscreen_btn._visible = false;		_fullscreen_btn.onRelease = Delegate.create(this, fullscreenClick);		if (_root.fullscreen_available == "false") {			_fullscreen_btn._visible = false;		}	}	private function fullscreenClick():Void {		ExternalInterface.call("lz_toggle_fullscreen_window", _root.game_id, _root.path);	}	private function setFullscreenBtnText():Void {		if (_isFullscreen == "true") {			_toolbar.fullscreenbtn.fullscreenHighlight.text = "close";			_toolbar.fullscreenbtn.fullscreenShadow.text = "close";		} else {			_toolbar.fullscreenbtn.fullscreenHighlight.text = "fullscreen";			_toolbar.fullscreenbtn.fullscreenShadow.text = "fullscreen";		}	}/**loadGame is to load the game @param none@return none*/	private function loadGame ():Void {		_gameMc = _rootMc.createEmptyMovieClip ("gameMc", _rootMc.getNextHighestDepth ());		pl = new Preloader (_rootMc, _gameURL, this, intializeEventMechanism);	}	public static function initializeBubbling (dispatcher:MovieClip) {		var parentDispatcher = dispatcher._parent;		var oldDispatchEvent = dispatcher.dispatchEvent;		dispatcher.dispatchEvent = function (evt) {			oldDispatchEvent.call (dispatcher,evt);			if (evt.bubbles) {				parentDispatcher.dispatchEvent (evt);			}		};	}/**intializeEventMechanism functino executed when the game has been loaded@param none@return none*/	private function intializeEventMechanism () {		EventDispatcher.initialize (_gameMc._parent);		EventDispatcher.initialize (_gameMc);		initializeBubbling (_gameMc);		var _listenerObj = new Object ();		_listenerObj.play = Delegate.create (this, playCallBack);		_listenerObj.win = Delegate.create (this, winCallBack);		_listenerObj.ready = Delegate.create (this, readyCallBack);		_listenerObj.submitscore = Delegate.create (this, submitScoreCallBack);		_rootMc.addEventListener ("play",_listenerObj);		_rootMc.addEventListener ("win",_listenerObj);		_rootMc.addEventListener ("ready",_listenerObj);		_rootMc.addEventListener ("submitscore",_listenerObj);	}/**winCallBack is call back function when Win event occurs@param  evt Object is the reference of the event generator*/	private function winCallBack (evt) {		trace("win callback fired");		if (_root.user_id) {			trace("submitting score... of "+_gameMc.game.getScore());			_submitScore.sendScore(_gameID, _gameMc.game.getScore(), _root.user_id);		}	}/**playCallBack is call back function when Play event occurs@param  evt Object is the reference of the event generator*/	private function playCallBack (evt) {		if (!_gamePlayStarted) {			_gamePlayStarted = true;						//_toolbar._visible = false;			_pauseController = new PauseControl (evt.game, _rootMc,_toolbar, _availableHints, _gameDesc);			_submitScore = new SubmitScore (_rootMc, _gameID);		} else {			_submitScore.initializeScore ();		}	}/**readyCallBack is call back function when ready event occurs@param  evt Object is the reference of the event generator*/	private function readyCallBack (evt) {	}	private function submitScoreCallBack (evt) {		_submitScore.showForm ();	}}